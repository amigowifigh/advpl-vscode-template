// Generated from Advpl.g4 by ANTLR 4.5.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var AdvplListener = require('./AdvplListener').AdvplListener;
var grammarFileName = "Advpl.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003m\u032c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0003",
    "\u0002\u0007\u0002\u0082\n\u0002\f\u0002\u000e\u0002\u0085\u000b\u0002",
    "\u0003\u0002\u0007\u0002\u0088\n\u0002\f\u0002\u000e\u0002\u008b\u000b",
    "\u0002\u0003\u0002\u0005\u0002\u008e\n\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0005\u0003\u0093\n\u0003\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u009c",
    "\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u00b0\n\u0007\u0003\b\u0003\b\u0003\t\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0003\n\u0005\n\u00ba\n\n\u0003\n\u0003\n",
    "\u0007\n\u00be\n\n\f\n\u000e\n\u00c1\u000b\n\u0003\n\u0007\n\u00c4\n",
    "\n\f\n\u000e\n\u00c7\u000b\n\u0003\n\u0003\n\u0003\n\u0005\n\u00cc\n",
    "\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u00db\n\r",
    "\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u00e3\n\u000e\u0003\u000e\u0005\u000e\u00e6\n\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u00ec\n\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u00f8\n\u000f",
    "\f\u000f\u000e\u000f\u00fb\u000b\u000f\u0003\u000f\u0007\u000f\u00fe",
    "\n\u000f\f\u000f\u000e\u000f\u0101\u000b\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u010f\n",
    "\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0113\n\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u011a\n",
    "\u0012\u0003\u0012\u0005\u0012\u011d\n\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u0123\n\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0130\n\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016",
    "\u0137\n\u0016\f\u0016\u000e\u0016\u013a\u000b\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0146\n\u0018\u0003\u0018",
    "\u0005\u0018\u0149\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u014f\n\u0018\u0003\u0018\u0003\u0018\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0005\u001a\u0157\n\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u015d\n\u001a",
    "\u0003\u001a\u0005\u001a\u0160\n\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u0164\n\u001a\u0003\u001a\u0005\u001a\u0167\n\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u016e\n",
    "\u001b\f\u001b\u000e\u001b\u0171\u000b\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0006\u001d\u017f\n",
    "\u001d\r\u001d\u000e\u001d\u0180\u0003\u001e\u0003\u001e\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0007\u001f\u0188\n\u001f\f\u001f\u000e\u001f",
    "\u018b\u000b\u001f\u0003 \u0003 \u0003 \u0007 \u0190\n \f \u000e \u0193",
    "\u000b \u0003!\u0003!\u0003!\u0003!\u0007!\u0199\n!\f!\u000e!\u019c",
    "\u000b!\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u01a2\n\"\f\"\u000e",
    "\"\u01a5\u000b\"\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0005$\u01b1\n$\u0003$\u0003$\u0003$\u0003$\u0005$\u01b7",
    "\n$\u0003%\u0003%\u0003%\u0007%\u01bc\n%\f%\u000e%\u01bf\u000b%\u0003",
    "&\u0003&\u0003&\u0005&\u01c4\n&\u0003&\u0006&\u01c7\n&\r&\u000e&\u01c8",
    "\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u01d9\n\'\u0003(",
    "\u0003(\u0005(\u01dd\n(\u0003)\u0003)\u0003*\u0003*\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0005+\u01e8\n+\u0003+\u0003+\u0003+\u0003+\u0005+\u01ee",
    "\n+\u0003+\u0003+\u0003+\u0003+\u0005+\u01f4\n+\u0003+\u0003+\u0003",
    "+\u0003+\u0005+\u01fa\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0005+\u020e\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0005+\u021a\n+\u0007+\u021c\n+\f+\u000e+\u021f",
    "\u000b+\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u0226\n,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0005,\u022e\n,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0005,\u0236\n,\u0003,\u0003,\u0005,\u023a\n,\u0003",
    ",\u0003,\u0003,\u0005,\u023f\n,\u0006,\u0241\n,\r,\u000e,\u0242\u0003",
    ",\u0003,\u0007,\u0247\n,\f,\u000e,\u024a\u000b,\u0003,\u0006,\u024d",
    "\n,\r,\u000e,\u024e\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u0259\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0007",
    ",\u0261\n,\f,\u000e,\u0264\u000b,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u0270\n,\u0003,\u0005,\u0273",
    "\n,\u0005,\u0275\n,\u0003-\u0003-\u0003.\u0003.\u0003/\u0003/\u0003",
    "/\u0003/\u0006/\u027f\n/\r/\u000e/\u0280\u00030\u00030\u00030\u0005",
    "0\u0286\n0\u00030\u00050\u0289\n0\u00031\u00031\u00031\u00031\u0003",
    "2\u00032\u00032\u00072\u0292\n2\f2\u000e2\u0295\u000b2\u00033\u0005",
    "3\u0298\n3\u00034\u00034\u00035\u00035\u00035\u00035\u00035\u00035\u0005",
    "5\u02a2\n5\u00036\u00036\u00036\u00036\u00036\u00056\u02a9\n6\u0003",
    "6\u00036\u00056\u02ad\n6\u00036\u00036\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00077\u02ba\n7\f7\u000e7\u02bd\u000b",
    "7\u00037\u00037\u00037\u00037\u00077\u02c3\n7\f7\u000e7\u02c6\u000b",
    "7\u00037\u00037\u00037\u00037\u00057\u02cc\n7\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00058\u02d4\n8\u00038\u00038\u00058\u02d8\n8\u0003",
    "8\u00038\u00058\u02dc\n8\u00039\u00039\u00039\u00059\u02e1\n9\u0003",
    ":\u0003:\u0003;\u0003;\u0003;\u0003;\u0005;\u02e9\n;\u0003;\u0003;\u0005",
    ";\u02ed\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u02f5\n",
    "<\u0006<\u02f7\n<\r<\u000e<\u02f8\u0003<\u0003<\u0005<\u02fd\n<\u0005",
    "<\u02ff\n<\u0003<\u0003<\u0003<\u0003<\u0005<\u0305\n<\u0005<\u0307",
    "\n<\u0003<\u0005<\u030a\n<\u0003=\u0003=\u0005=\u030e\n=\u0003=\u0003",
    "=\u0003=\u0003=\u0007=\u0314\n=\f=\u000e=\u0317\u000b=\u0006=\u0319",
    "\n=\r=\u000e=\u031a\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003",
    "?\u0003@\u0006@\u0325\n@\r@\u000e@\u0326\u0003@\u0005@\u032a\n@\u0003",
    "@\u0002\u0003TA\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0002\u000b\u0003\u0002ij\u0003\u0002-.\u0003\u0002CE\u0005",
    "\u0002\b\u000b\u001d\u001ddd\t\u0002((::GGJJMMPQff\f\u0002\f\f((22:",
    ":GGLLPPWW[]ff\u0003\u0002>?\u0004\u0002\u000e\u000e9:\u0004\u0002\u0013",
    "\u0013dd\u0389\u0002\u0083\u0003\u0002\u0002\u0002\u0004\u0092\u0003",
    "\u0002\u0002\u0002\u0006\u0094\u0003\u0002\u0002\u0002\b\u009b\u0003",
    "\u0002\u0002\u0002\n\u009d\u0003\u0002\u0002\u0002\f\u00af\u0003\u0002",
    "\u0002\u0002\u000e\u00b1\u0003\u0002\u0002\u0002\u0010\u00b3\u0003\u0002",
    "\u0002\u0002\u0012\u00b6\u0003\u0002\u0002\u0002\u0014\u00cf\u0003\u0002",
    "\u0002\u0002\u0016\u00d2\u0003\u0002\u0002\u0002\u0018\u00d6\u0003\u0002",
    "\u0002\u0002\u001a\u00de\u0003\u0002\u0002\u0002\u001c\u00ef\u0003\u0002",
    "\u0002\u0002\u001e\u0105\u0003\u0002\u0002\u0002 \u010b\u0003\u0002",
    "\u0002\u0002\"\u0116\u0003\u0002\u0002\u0002$\u0126\u0003\u0002\u0002",
    "\u0002&\u0129\u0003\u0002\u0002\u0002(\u012c\u0003\u0002\u0002\u0002",
    "*\u0131\u0003\u0002\u0002\u0002,\u013e\u0003\u0002\u0002\u0002.\u0142",
    "\u0003\u0002\u0002\u00020\u0152\u0003\u0002\u0002\u00022\u0156\u0003",
    "\u0002\u0002\u00024\u016a\u0003\u0002\u0002\u00026\u0172\u0003\u0002",
    "\u0002\u00028\u017e\u0003\u0002\u0002\u0002:\u0182\u0003\u0002\u0002",
    "\u0002<\u0184\u0003\u0002\u0002\u0002>\u018c\u0003\u0002\u0002\u0002",
    "@\u0194\u0003\u0002\u0002\u0002B\u019d\u0003\u0002\u0002\u0002D\u01a6",
    "\u0003\u0002\u0002\u0002F\u01b6\u0003\u0002\u0002\u0002H\u01b8\u0003",
    "\u0002\u0002\u0002J\u01c6\u0003\u0002\u0002\u0002L\u01d8\u0003\u0002",
    "\u0002\u0002N\u01da\u0003\u0002\u0002\u0002P\u01de\u0003\u0002\u0002",
    "\u0002R\u01e0\u0003\u0002\u0002\u0002T\u01ed\u0003\u0002\u0002\u0002",
    "V\u0274\u0003\u0002\u0002\u0002X\u0276\u0003\u0002\u0002\u0002Z\u0278",
    "\u0003\u0002\u0002\u0002\\\u027e\u0003\u0002\u0002\u0002^\u0282\u0003",
    "\u0002\u0002\u0002`\u028a\u0003\u0002\u0002\u0002b\u028e\u0003\u0002",
    "\u0002\u0002d\u0297\u0003\u0002\u0002\u0002f\u0299\u0003\u0002\u0002",
    "\u0002h\u02a1\u0003\u0002\u0002\u0002j\u02a3\u0003\u0002\u0002\u0002",
    "l\u02b0\u0003\u0002\u0002\u0002n\u02cd\u0003\u0002\u0002\u0002p\u02dd",
    "\u0003\u0002\u0002\u0002r\u02e2\u0003\u0002\u0002\u0002t\u02e4\u0003",
    "\u0002\u0002\u0002v\u02ee\u0003\u0002\u0002\u0002x\u030d\u0003\u0002",
    "\u0002\u0002z\u031c\u0003\u0002\u0002\u0002|\u031f\u0003\u0002\u0002",
    "\u0002~\u0329\u0003\u0002\u0002\u0002\u0080\u0082\u0005\u0004\u0003",
    "\u0002\u0081\u0080\u0003\u0002\u0002\u0002\u0082\u0085\u0003\u0002\u0002",
    "\u0002\u0083\u0081\u0003\u0002\u0002\u0002\u0083\u0084\u0003\u0002\u0002",
    "\u0002\u0084\u0089\u0003\u0002\u0002\u0002\u0085\u0083\u0003\u0002\u0002",
    "\u0002\u0086\u0088\u0005\f\u0007\u0002\u0087\u0086\u0003\u0002\u0002",
    "\u0002\u0088\u008b\u0003\u0002\u0002\u0002\u0089\u0087\u0003\u0002\u0002",
    "\u0002\u0089\u008a\u0003\u0002\u0002\u0002\u008a\u008d\u0003\u0002\u0002",
    "\u0002\u008b\u0089\u0003\u0002\u0002\u0002\u008c\u008e\u0007\u0002\u0002",
    "\u0003\u008d\u008c\u0003\u0002\u0002\u0002\u008d\u008e\u0003\u0002\u0002",
    "\u0002\u008e\u0003\u0003\u0002\u0002\u0002\u008f\u0093\u0005\u0006\u0004",
    "\u0002\u0090\u0093\u0005~@\u0002\u0091\u0093\u0005\u0010\t\u0002\u0092",
    "\u008f\u0003\u0002\u0002\u0002\u0092\u0090\u0003\u0002\u0002\u0002\u0092",
    "\u0091\u0003\u0002\u0002\u0002\u0093\u0005\u0003\u0002\u0002\u0002\u0094",
    "\u0095\u0007b\u0002\u0002\u0095\u0096\t\u0002\u0002\u0002\u0096\u0007",
    "\u0003\u0002\u0002\u0002\u0097\u0098\t\u0003\u0002\u0002\u0098\u009c",
    "\u0005T+\u0002\u0099\u009c\u0007/\u0002\u0002\u009a\u009c\u00070\u0002",
    "\u0002\u009b\u0097\u0003\u0002\u0002\u0002\u009b\u0099\u0003\u0002\u0002",
    "\u0002\u009b\u009a\u0003\u0002\u0002\u0002\u009c\t\u0003\u0002\u0002",
    "\u0002\u009d\u009e\u0007,\u0002\u0002\u009e\u009f\u0005Z.\u0002\u009f",
    "\u00a0\u0005T+\u0002\u00a0\u00a1\u0005~@\u0002\u00a1\u000b\u0003\u0002",
    "\u0002\u0002\u00a2\u00b0\u0005\u0012\n\u0002\u00a3\u00b0\u0005\u001a",
    "\u000e\u0002\u00a4\u00b0\u00052\u001a\u0002\u00a5\u00b0\u0005\u001c",
    "\u000f\u0002\u00a6\u00b0\u0005\"\u0012\u0002\u00a7\u00b0\u0005\u0010",
    "\t\u0002\u00a8\u00b0\u0005*\u0016\u0002\u00a9\u00b0\u0005.\u0018\u0002",
    "\u00aa\u00b0\u0005~@\u0002\u00ab\u00b0\u0005\n\u0006\u0002\u00ac\u00ad",
    "\u0005\b\u0005\u0002\u00ad\u00ae\u0005~@\u0002\u00ae\u00b0\u0003\u0002",
    "\u0002\u0002\u00af\u00a2\u0003\u0002\u0002\u0002\u00af\u00a3\u0003\u0002",
    "\u0002\u0002\u00af\u00a4\u0003\u0002\u0002\u0002\u00af\u00a5\u0003\u0002",
    "\u0002\u0002\u00af\u00a6\u0003\u0002\u0002\u0002\u00af\u00a7\u0003\u0002",
    "\u0002\u0002\u00af\u00a8\u0003\u0002\u0002\u0002\u00af\u00a9\u0003\u0002",
    "\u0002\u0002\u00af\u00aa\u0003\u0002\u0002\u0002\u00af\u00ab\u0003\u0002",
    "\u0002\u0002\u00af\u00ac\u0003\u0002\u0002\u0002\u00b0\r\u0003\u0002",
    "\u0002\u0002\u00b1\u00b2\t\u0004\u0002\u0002\u00b2\u000f\u0003\u0002",
    "\u0002\u0002\u00b3\u00b4\u0007C\u0002\u0002\u00b4\u00b5\u0005> \u0002",
    "\u00b5\u0011\u0003\u0002\u0002\u0002\u00b6\u00b7\u0007M\u0002\u0002",
    "\u00b7\u00b9\u0005Z.\u0002\u00b8\u00ba\u0005\u0014\u000b\u0002\u00b9",
    "\u00b8\u0003\u0002\u0002\u0002\u00b9\u00ba\u0003\u0002\u0002\u0002\u00ba",
    "\u00bb\u0003\u0002\u0002\u0002\u00bb\u00bf\u0005~@\u0002\u00bc\u00be",
    "\u0005\u0016\f\u0002\u00bd\u00bc\u0003\u0002\u0002\u0002\u00be\u00c1",
    "\u0003\u0002\u0002\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00bf\u00c0",
    "\u0003\u0002\u0002\u0002\u00c0\u00c5\u0003\u0002\u0002\u0002\u00c1\u00bf",
    "\u0003\u0002\u0002\u0002\u00c2\u00c4\u0005\u0018\r\u0002\u00c3\u00c2",
    "\u0003\u0002\u0002\u0002\u00c4\u00c7\u0003\u0002\u0002\u0002\u00c5\u00c3",
    "\u0003\u0002\u0002\u0002\u00c5\u00c6\u0003\u0002\u0002\u0002\u00c6\u00cb",
    "\u0003\u0002\u0002\u0002\u00c7\u00c5\u0003\u0002\u0002\u0002\u00c8\u00cc",
    "\u0007N\u0002\u0002\u00c9\u00ca\u0007:\u0002\u0002\u00ca\u00cc\u0007",
    "M\u0002\u0002\u00cb\u00c8\u0003\u0002\u0002\u0002\u00cb\u00c9\u0003",
    "\u0002\u0002\u0002\u00cc\u00cd\u0003\u0002\u0002\u0002\u00cd\u00ce\u0005",
    "~@\u0002\u00ce\u0013\u0003\u0002\u0002\u0002\u00cf\u00d0\u0007Q\u0002",
    "\u0002\u00d0\u00d1\u0005Z.\u0002\u00d1\u0015\u0003\u0002\u0002\u0002",
    "\u00d2\u00d3\u0007P\u0002\u0002\u00d3\u00d4\u0005Z.\u0002\u00d4\u00d5",
    "\u0005~@\u0002\u00d5\u0017\u0003\u0002\u0002\u0002\u00d6\u00d7\u0007",
    "O\u0002\u0002\u00d7\u00d8\u0005Z.\u0002\u00d8\u00da\u0005`1\u0002\u00d9",
    "\u00db\u0007\u0003\u0002\u0002\u00da\u00d9\u0003\u0002\u0002\u0002\u00da",
    "\u00db\u0003\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc",
    "\u00dd\u0005~@\u0002\u00dd\u0019\u0003\u0002\u0002\u0002\u00de\u00df",
    "\u0007O\u0002\u0002\u00df\u00e5\u0005Z.\u0002\u00e0\u00e2\u0007^\u0002",
    "\u0002\u00e1\u00e3\u00054\u001b\u0002\u00e2\u00e1\u0003\u0002\u0002",
    "\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002\u00e3\u00e4\u0003\u0002\u0002",
    "\u0002\u00e4\u00e6\u0007_\u0002\u0002\u00e5\u00e0\u0003\u0002\u0002",
    "\u0002\u00e5\u00e6\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002\u0002",
    "\u0002\u00e7\u00e8\u0007M\u0002\u0002\u00e8\u00e9\u0005Z.\u0002\u00e9",
    "\u00eb\u0005~@\u0002\u00ea\u00ec\u00058\u001d\u0002\u00eb\u00ea\u0003",
    "\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003",
    "\u0002\u0002\u0002\u00ed\u00ee\u0005J&\u0002\u00ee\u001b\u0003\u0002",
    "\u0002\u0002\u00ef\u00f0\u0007S\u0002\u0002\u00f0\u00f1\u0005Z.\u0002",
    "\u00f1\u00f2\u0007[\u0002\u0002\u00f2\u00f3\u0005h5\u0002\u00f3\u00f4",
    "\u0007T\u0002\u0002\u00f4\u00f5\u0005h5\u0002\u00f5\u00f9\u0005~@\u0002",
    "\u00f6\u00f8\u0005\u001e\u0010\u0002\u00f7\u00f6\u0003\u0002\u0002\u0002",
    "\u00f8\u00fb\u0003\u0002\u0002\u0002\u00f9\u00f7\u0003\u0002\u0002\u0002",
    "\u00f9\u00fa\u0003\u0002\u0002\u0002\u00fa\u00ff\u0003\u0002\u0002\u0002",
    "\u00fb\u00f9\u0003\u0002\u0002\u0002\u00fc\u00fe\u0005 \u0011\u0002",
    "\u00fd\u00fc\u0003\u0002\u0002\u0002\u00fe\u0101\u0003\u0002\u0002\u0002",
    "\u00ff\u00fd\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002\u0002",
    "\u0100\u0102\u0003\u0002\u0002\u0002\u0101\u00ff\u0003\u0002\u0002\u0002",
    "\u0102\u0103\u0007V\u0002\u0002\u0103\u0104\u0005~@\u0002\u0104\u001d",
    "\u0003\u0002\u0002\u0002\u0105\u0106\u0007X\u0002\u0002\u0106\u0107",
    "\u0005Z.\u0002\u0107\u0108\u0007\\\u0002\u0002\u0108\u0109\u0005(\u0015",
    "\u0002\u0109\u010a\u0005~@\u0002\u010a\u001f\u0003\u0002\u0002\u0002",
    "\u010b\u010c\u0007W\u0002\u0002\u010c\u010e\u0005Z.\u0002\u010d\u010f",
    "\u0005`1\u0002\u010e\u010d\u0003\u0002\u0002\u0002\u010e\u010f\u0003",
    "\u0002\u0002\u0002\u010f\u0112\u0003\u0002\u0002\u0002\u0110\u0111\u0007",
    "[\u0002\u0002\u0111\u0113\u0005h5\u0002\u0112\u0110\u0003\u0002\u0002",
    "\u0002\u0112\u0113\u0003\u0002\u0002\u0002\u0113\u0114\u0003\u0002\u0002",
    "\u0002\u0114\u0115\u0005~@\u0002\u0115!\u0003\u0002\u0002\u0002\u0116",
    "\u0117\u0007W\u0002\u0002\u0117\u0119\u0005Z.\u0002\u0118\u011a\u0005",
    "$\u0013\u0002\u0119\u0118\u0003\u0002\u0002\u0002\u0119\u011a\u0003",
    "\u0002\u0002\u0002\u011a\u011c\u0003\u0002\u0002\u0002\u011b\u011d\u0005",
    "&\u0014\u0002\u011c\u011b\u0003\u0002\u0002\u0002\u011c\u011d\u0003",
    "\u0002\u0002\u0002\u011d\u011e\u0003\u0002\u0002\u0002\u011e\u011f\u0007",
    "S\u0002\u0002\u011f\u0120\u0005Z.\u0002\u0120\u0122\u0005~@\u0002\u0121",
    "\u0123\u00058\u001d\u0002\u0122\u0121\u0003\u0002\u0002\u0002\u0122",
    "\u0123\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124",
    "\u0125\u0005J&\u0002\u0125#\u0003\u0002\u0002\u0002\u0126\u0127\u0007",
    "Y\u0002\u0002\u0127\u0128\u00054\u001b\u0002\u0128%\u0003\u0002\u0002",
    "\u0002\u0129\u012a\u0007Z\u0002\u0002\u012a\u012b\u00054\u001b\u0002",
    "\u012b\'\u0003\u0002\u0002\u0002\u012c\u012f\u0005Z.\u0002\u012d\u012e",
    "\u0007]\u0002\u0002\u012e\u0130\u0005Z.\u0002\u012f\u012d\u0003\u0002",
    "\u0002\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130)\u0003\u0002",
    "\u0002\u0002\u0131\u0132\u0007R\u0002\u0002\u0132\u0133\u0005Z.\u0002",
    "\u0133\u0138\u0005~@\u0002\u0134\u0137\u0005\u001e\u0010\u0002\u0135",
    "\u0137\u0005,\u0017\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136",
    "\u0135\u0003\u0002\u0002\u0002\u0137\u013a\u0003\u0002\u0002\u0002\u0138",
    "\u0136\u0003\u0002\u0002\u0002\u0138\u0139\u0003\u0002\u0002\u0002\u0139",
    "\u013b\u0003\u0002\u0002\u0002\u013a\u0138\u0003\u0002\u0002\u0002\u013b",
    "\u013c\u0007U\u0002\u0002\u013c\u013d\u0005~@\u0002\u013d+\u0003\u0002",
    "\u0002\u0002\u013e\u013f\u0007W\u0002\u0002\u013f\u0140\u0005Z.\u0002",
    "\u0140\u0141\u0005~@\u0002\u0141-\u0003\u0002\u0002\u0002\u0142\u0143",
    "\u0007W\u0002\u0002\u0143\u0145\u0005Z.\u0002\u0144\u0146\u0005&\u0014",
    "\u0002\u0145\u0144\u0003\u0002\u0002\u0002\u0145\u0146\u0003\u0002\u0002",
    "\u0002\u0146\u0148\u0003\u0002\u0002\u0002\u0147\u0149\u0005$\u0013",
    "\u0002\u0148\u0147\u0003\u0002\u0002\u0002\u0148\u0149\u0003\u0002\u0002",
    "\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u014b\u0007R\u0002",
    "\u0002\u014b\u014c\u0005Z.\u0002\u014c\u014e\u0005~@\u0002\u014d\u014f",
    "\u00058\u001d\u0002\u014e\u014d\u0003\u0002\u0002\u0002\u014e\u014f",
    "\u0003\u0002\u0002\u0002\u014f\u0150\u0003\u0002\u0002\u0002\u0150\u0151",
    "\u0005J&\u0002\u0151/\u0003\u0002\u0002\u0002\u0152\u0153\u0007:\u0002",
    "\u0002\u0153\u0154\u0007W\u0002\u0002\u01541\u0003\u0002\u0002\u0002",
    "\u0155\u0157\u0005\u000e\b\u0002\u0156\u0155\u0003\u0002\u0002\u0002",
    "\u0156\u0157\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002",
    "\u0158\u0159\u0007F\u0002\u0002\u0159\u015f\u0005Z.\u0002\u015a\u015c",
    "\u0007^\u0002\u0002\u015b\u015d\u00054\u001b\u0002\u015c\u015b\u0003",
    "\u0002\u0002\u0002\u015c\u015d\u0003\u0002\u0002\u0002\u015d\u015e\u0003",
    "\u0002\u0002\u0002\u015e\u0160\u0007_\u0002\u0002\u015f\u015a\u0003",
    "\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160\u0163\u0003",
    "\u0002\u0002\u0002\u0161\u0164\u0005~@\u0002\u0162\u0164\u0007\u0002",
    "\u0002\u0003\u0163\u0161\u0003\u0002\u0002\u0002\u0163\u0162\u0003\u0002",
    "\u0002\u0002\u0164\u0166\u0003\u0002\u0002\u0002\u0165\u0167\u00058",
    "\u001d\u0002\u0166\u0165\u0003\u0002\u0002\u0002\u0166\u0167\u0003\u0002",
    "\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002\u0168\u0169\u0005J",
    "&\u0002\u01693\u0003\u0002\u0002\u0002\u016a\u016f\u00056\u001c\u0002",
    "\u016b\u016c\u0007c\u0002\u0002\u016c\u016e\u00056\u001c\u0002\u016d",
    "\u016b\u0003\u0002\u0002\u0002\u016e\u0171\u0003\u0002\u0002\u0002\u016f",
    "\u016d\u0003\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170",
    "5\u0003\u0002\u0002\u0002\u0171\u016f\u0003\u0002\u0002\u0002\u0172",
    "\u0173\u0005Z.\u0002\u01737\u0003\u0002\u0002\u0002\u0174\u0175\u0007",
    "@\u0002\u0002\u0175\u0176\u0005<\u001f\u0002\u0176\u0177\u0005~@\u0002",
    "\u0177\u017f\u0003\u0002\u0002\u0002\u0178\u0179\u0005\b\u0005\u0002",
    "\u0179\u017a\u0005~@\u0002\u017a\u017f\u0003\u0002\u0002\u0002\u017b",
    "\u017c\u0005:\u001e\u0002\u017c\u017d\u0005~@\u0002\u017d\u017f\u0003",
    "\u0002\u0002\u0002\u017e\u0174\u0003\u0002\u0002\u0002\u017e\u0178\u0003",
    "\u0002\u0002\u0002\u017e\u017b\u0003\u0002\u0002\u0002\u017f\u0180\u0003",
    "\u0002\u0002\u0002\u0180\u017e\u0003\u0002\u0002\u0002\u0180\u0181\u0003",
    "\u0002\u0002\u0002\u01819\u0003\u0002\u0002\u0002\u0182\u0183\u0005",
    "\u0010\t\u0002\u0183;\u0003\u0002\u0002\u0002\u0184\u0189\u0005T+\u0002",
    "\u0185\u0186\u0007c\u0002\u0002\u0186\u0188\u0005T+\u0002\u0187\u0185",
    "\u0003\u0002\u0002\u0002\u0188\u018b\u0003\u0002\u0002\u0002\u0189\u0187",
    "\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002\u018a=",
    "\u0003\u0002\u0002\u0002\u018b\u0189\u0003\u0002\u0002\u0002\u018c\u0191",
    "\u0005T+\u0002\u018d\u018e\u0007c\u0002\u0002\u018e\u0190\u0005T+\u0002",
    "\u018f\u018d\u0003\u0002\u0002\u0002\u0190\u0193\u0003\u0002\u0002\u0002",
    "\u0191\u018f\u0003\u0002\u0002\u0002\u0191\u0192\u0003\u0002\u0002\u0002",
    "\u0192?\u0003\u0002\u0002\u0002\u0193\u0191\u0003\u0002\u0002\u0002",
    "\u0194\u0195\u0007B\u0002\u0002\u0195\u019a\u0005T+\u0002\u0196\u0197",
    "\u0007c\u0002\u0002\u0197\u0199\u0005T+\u0002\u0198\u0196\u0003\u0002",
    "\u0002\u0002\u0199\u019c\u0003\u0002\u0002\u0002\u019a\u0198\u0003\u0002",
    "\u0002\u0002\u019a\u019b\u0003\u0002\u0002\u0002\u019bA\u0003\u0002",
    "\u0002\u0002\u019c\u019a\u0003\u0002\u0002\u0002\u019d\u019e\u0007A",
    "\u0002\u0002\u019e\u01a3\u0005T+\u0002\u019f\u01a0\u0007c\u0002\u0002",
    "\u01a0\u01a2\u0005T+\u0002\u01a1\u019f\u0003\u0002\u0002\u0002\u01a2",
    "\u01a5\u0003\u0002\u0002\u0002\u01a3\u01a1\u0003\u0002\u0002\u0002\u01a3",
    "\u01a4\u0003\u0002\u0002\u0002\u01a4C\u0003\u0002\u0002\u0002\u01a5",
    "\u01a3\u0003\u0002\u0002\u0002\u01a6\u01a7\u0007J\u0002\u0002\u01a7",
    "\u01a8\u0005T+\u0002\u01a8E\u0003\u0002\u0002\u0002\u01a9\u01aa\u0007",
    "\u0004\u0002\u0002\u01aa\u01ab\u0005b2\u0002\u01ab\u01ac\u0007\u0005",
    "\u0002\u0002\u01ac\u01b7\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007\u0004",
    "\u0002\u0002\u01ae\u01b0\u0007\u0006\u0002\u0002\u01af\u01b1\u0005H",
    "%\u0002\u01b0\u01af\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003\u0002",
    "\u0002\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b3\u0007\u0006",
    "\u0002\u0002\u01b3\u01b4\u0005b2\u0002\u01b4\u01b5\u0007\u0005\u0002",
    "\u0002\u01b5\u01b7\u0003\u0002\u0002\u0002\u01b6\u01a9\u0003\u0002\u0002",
    "\u0002\u01b6\u01ad\u0003\u0002\u0002\u0002\u01b7G\u0003\u0002\u0002",
    "\u0002\u01b8\u01bd\u0005Z.\u0002\u01b9\u01ba\u0007c\u0002\u0002\u01ba",
    "\u01bc\u0005Z.\u0002\u01bb\u01b9\u0003\u0002\u0002\u0002\u01bc\u01bf",
    "\u0003\u0002\u0002\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01be",
    "\u0003\u0002\u0002\u0002\u01beI\u0003\u0002\u0002\u0002\u01bf\u01bd",
    "\u0003\u0002\u0002\u0002\u01c0\u01c3\u0005L\'\u0002\u01c1\u01c4\u0005",
    "~@\u0002\u01c2\u01c4\u0007\u0002\u0002\u0003\u01c3\u01c1\u0003\u0002",
    "\u0002\u0002\u01c3\u01c2\u0003\u0002\u0002\u0002\u01c4\u01c7\u0003\u0002",
    "\u0002\u0002\u01c5\u01c7\u0005~@\u0002\u01c6\u01c0\u0003\u0002\u0002",
    "\u0002\u01c6\u01c5\u0003\u0002\u0002\u0002\u01c7\u01c8\u0003\u0002\u0002",
    "\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002",
    "\u0002\u01c9K\u0003\u0002\u0002\u0002\u01ca\u01d9\u0005R*\u0002\u01cb",
    "\u01d9\u0005l7\u0002\u01cc\u01d9\u0005n8\u0002\u01cd\u01d9\u0005p9\u0002",
    "\u01ce\u01d9\u0005t;\u0002\u01cf\u01d9\u0005v<\u0002\u01d0\u01d9\u0005",
    "N(\u0002\u01d1\u01d9\u0005B\"\u0002\u01d2\u01d9\u0005r:\u0002\u01d3",
    "\u01d9\u0005D#\u0002\u01d4\u01d9\u0005@!\u0002\u01d5\u01d9\u0005\u0010",
    "\t\u0002\u01d6\u01d9\u0005\b\u0005\u0002\u01d7\u01d9\u0005x=\u0002\u01d8",
    "\u01ca\u0003\u0002\u0002\u0002\u01d8\u01cb\u0003\u0002\u0002\u0002\u01d8",
    "\u01cc\u0003\u0002\u0002\u0002\u01d8\u01cd\u0003\u0002\u0002\u0002\u01d8",
    "\u01ce\u0003\u0002\u0002\u0002\u01d8\u01cf\u0003\u0002\u0002\u0002\u01d8",
    "\u01d0\u0003\u0002\u0002\u0002\u01d8\u01d1\u0003\u0002\u0002\u0002\u01d8",
    "\u01d2\u0003\u0002\u0002\u0002\u01d8\u01d3\u0003\u0002\u0002\u0002\u01d8",
    "\u01d4\u0003\u0002\u0002\u0002\u01d8\u01d5\u0003\u0002\u0002\u0002\u01d8",
    "\u01d6\u0003\u0002\u0002\u0002\u01d8\u01d7\u0003\u0002\u0002\u0002\u01d9",
    "M\u0003\u0002\u0002\u0002\u01da\u01dc\u0007K\u0002\u0002\u01db\u01dd",
    "\u0005P)\u0002\u01dc\u01db\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003",
    "\u0002\u0002\u0002\u01ddO\u0003\u0002\u0002\u0002\u01de\u01df\u0005",
    "T+\u0002\u01dfQ\u0003\u0002\u0002\u0002\u01e0\u01e1\u0005T+\u0002\u01e1",
    "S\u0003\u0002\u0002\u0002\u01e2\u01e7\b+\u0001\u0002\u01e3\u01e8\u0007",
    "\u001e\u0002\u0002\u01e4\u01e8\u0007\u001f\u0002\u0002\u01e5\u01e8\u0007",
    "\u001b\u0002\u0002\u01e6\u01e8\u0007\u001c\u0002\u0002\u01e7\u01e3\u0003",
    "\u0002\u0002\u0002\u01e7\u01e4\u0003\u0002\u0002\u0002\u01e7\u01e5\u0003",
    "\u0002\u0002\u0002\u01e7\u01e6\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003",
    "\u0002\u0002\u0002\u01e9\u01ee\u0005T+\u000b\u01ea\u01eb\u0007\u0007",
    "\u0002\u0002\u01eb\u01ee\u0005T+\n\u01ec\u01ee\u0005V,\u0002\u01ed\u01e2",
    "\u0003\u0002\u0002\u0002\u01ed\u01ea\u0003\u0002\u0002\u0002\u01ed\u01ec",
    "\u0003\u0002\u0002\u0002\u01ee\u021d\u0003\u0002\u0002\u0002\u01ef\u01f3",
    "\f\t\u0002\u0002\u01f0\u01f4\u0007 \u0002\u0002\u01f1\u01f4\u0007!\u0002",
    "\u0002\u01f2\u01f4\u0007\"\u0002\u0002\u01f3\u01f0\u0003\u0002\u0002",
    "\u0002\u01f3\u01f1\u0003\u0002\u0002\u0002\u01f3\u01f2\u0003\u0002\u0002",
    "\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5\u021c\u0005T+\n\u01f6",
    "\u01f9\f\b\u0002\u0002\u01f7\u01fa\u0007\u001e\u0002\u0002\u01f8\u01fa",
    "\u0007\u001f\u0002\u0002\u01f9\u01f7\u0003\u0002\u0002\u0002\u01f9\u01f8",
    "\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb\u021c",
    "\u0005T+\t\u01fc\u01fd\f\u0007\u0002\u0002\u01fd\u01fe\u0007H\u0002",
    "\u0002\u01fe\u021c\u0005T+\b\u01ff\u0200\f\u0006\u0002\u0002\u0200\u0201",
    "\u0007I\u0002\u0002\u0201\u021c\u0005T+\u0007\u0202\u020d\f\u0005\u0002",
    "\u0002\u0203\u020e\u0007\u0014\u0002\u0002\u0204\u020e\u0007\u0015\u0002",
    "\u0002\u0205\u020e\u0007\u0011\u0002\u0002\u0206\u020e\u0007\u0012\u0002",
    "\u0002\u0207\u020e\u0007\u0013\u0002\u0002\u0208\u020e\u0007\u0016\u0002",
    "\u0002\u0209\u020e\u0007\u0017\u0002\u0002\u020a\u020e\u0007\u0018\u0002",
    "\u0002\u020b\u020e\u0007\u0019\u0002\u0002\u020c\u020e\u0007\u001a\u0002",
    "\u0002\u020d\u0203\u0003\u0002\u0002\u0002\u020d\u0204\u0003\u0002\u0002",
    "\u0002\u020d\u0205\u0003\u0002\u0002\u0002\u020d\u0206\u0003\u0002\u0002",
    "\u0002\u020d\u0207\u0003\u0002\u0002\u0002\u020d\u0208\u0003\u0002\u0002",
    "\u0002\u020d\u0209\u0003\u0002\u0002\u0002\u020d\u020a\u0003\u0002\u0002",
    "\u0002\u020d\u020b\u0003\u0002\u0002\u0002\u020d\u020c\u0003\u0002\u0002",
    "\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u021c\u0005T+\u0006",
    "\u0210\u0211\f\u0004\u0002\u0002\u0211\u0212\u0007&\u0002\u0002\u0212",
    "\u021c\u0005T+\u0005\u0213\u0214\f\u0003\u0002\u0002\u0214\u0215\t\u0005",
    "\u0002\u0002\u0215\u021c\u0005T+\u0004\u0216\u0219\f\f\u0002\u0002\u0217",
    "\u021a\u0007\u001b\u0002\u0002\u0218\u021a\u0007\u001c\u0002\u0002\u0219",
    "\u0217\u0003\u0002\u0002\u0002\u0219\u0218\u0003\u0002\u0002\u0002\u021a",
    "\u021c\u0003\u0002\u0002\u0002\u021b\u01ef\u0003\u0002\u0002\u0002\u021b",
    "\u01f6\u0003\u0002\u0002\u0002\u021b\u01fc\u0003\u0002\u0002\u0002\u021b",
    "\u01ff\u0003\u0002\u0002\u0002\u021b\u0202\u0003\u0002\u0002\u0002\u021b",
    "\u0210\u0003\u0002\u0002\u0002\u021b\u0213\u0003\u0002\u0002\u0002\u021b",
    "\u0216\u0003\u0002\u0002\u0002\u021c\u021f\u0003\u0002\u0002\u0002\u021d",
    "\u021b\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002\u021e",
    "U\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u0220",
    "\u0221\u0007^\u0002\u0002\u0221\u0222\u0005b2\u0002\u0222\u0223\u0007",
    "_\u0002\u0002\u0223\u0275\u0003\u0002\u0002\u0002\u0224\u0226\u0007",
    "#\u0002\u0002\u0225\u0224\u0003\u0002\u0002\u0002\u0225\u0226\u0003",
    "\u0002\u0002\u0002\u0226\u0227\u0003\u0002\u0002\u0002\u0227\u0228\u0005",
    "Z.\u0002\u0228\u0229\u0005\\/\u0002\u0229\u0275\u0003\u0002\u0002\u0002",
    "\u022a\u022b\u0005Z.\u0002\u022b\u022d\u0005`1\u0002\u022c\u022e\u0005",
    "\\/\u0002\u022d\u022c\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002",
    "\u0002\u0002\u022e\u0275\u0003\u0002\u0002\u0002\u022f\u0230\u0005Z",
    ".\u0002\u0230\u0231\u0005`1\u0002\u0231\u0232\u0007\f\u0002\u0002\u0232",
    "\u0233\u0005Z.\u0002\u0233\u0275\u0003\u0002\u0002\u0002\u0234\u0236",
    "\u0007#\u0002\u0002\u0235\u0234\u0003\u0002\u0002\u0002\u0235\u0236",
    "\u0003\u0002\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237\u0239",
    "\u0005Z.\u0002\u0238\u023a\u0005\\/\u0002\u0239\u0238\u0003\u0002\u0002",
    "\u0002\u0239\u023a\u0003\u0002\u0002\u0002\u023a\u0240\u0003\u0002\u0002",
    "\u0002\u023b\u023c\u0007\f\u0002\u0002\u023c\u023e\u0005Z.\u0002\u023d",
    "\u023f\u0005\\/\u0002\u023e\u023d\u0003\u0002\u0002\u0002\u023e\u023f",
    "\u0003\u0002\u0002\u0002\u023f\u0241\u0003\u0002\u0002\u0002\u0240\u023b",
    "\u0003\u0002\u0002\u0002\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0240",
    "\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002\u0243\u0275",
    "\u0003\u0002\u0002\u0002\u0244\u0248\u0005Z.\u0002\u0245\u0247\u0005",
    "\\/\u0002\u0246\u0245\u0003\u0002\u0002\u0002\u0247\u024a\u0003\u0002",
    "\u0002\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002",
    "\u0002\u0002\u0249\u024c\u0003\u0002\u0002\u0002\u024a\u0248\u0003\u0002",
    "\u0002\u0002\u024b\u024d\u0005^0\u0002\u024c\u024b\u0003\u0002\u0002",
    "\u0002\u024d\u024e\u0003\u0002\u0002\u0002\u024e\u024c\u0003\u0002\u0002",
    "\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0275\u0003\u0002\u0002",
    "\u0002\u0250\u0251\u0005Z.\u0002\u0251\u0252\u0007^\u0002\u0002\u0252",
    "\u0253\u0007_\u0002\u0002\u0253\u0254\u0007\f\u0002\u0002\u0254\u0255",
    "\u0005Z.\u0002\u0255\u0256\u0005`1\u0002\u0256\u0275\u0003\u0002\u0002",
    "\u0002\u0257\u0259\u0007#\u0002\u0002\u0258\u0257\u0003\u0002\u0002",
    "\u0002\u0258\u0259\u0003\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002",
    "\u0002\u025a\u0275\u0005Z.\u0002\u025b\u025c\u0007#\u0002\u0002\u025c",
    "\u025d\u0007L\u0002\u0002\u025d\u0262\u0005Z.\u0002\u025e\u025f\u0007",
    "\f\u0002\u0002\u025f\u0261\u0005Z.\u0002\u0260\u025e\u0003\u0002\u0002",
    "\u0002\u0261\u0264\u0003\u0002\u0002\u0002\u0262\u0260\u0003\u0002\u0002",
    "\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263\u0265\u0003\u0002\u0002",
    "\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0265\u0266\u0007\\\u0002",
    "\u0002\u0266\u0267\u0005Z.\u0002\u0267\u0275\u0003\u0002\u0002\u0002",
    "\u0268\u0275\u0005h5\u0002\u0269\u0275\u0005F$\u0002\u026a\u0275\u0005",
    "j6\u0002\u026b\u026c\u0007$\u0002\u0002\u026c\u026f\u0005T+\u0002\u026d",
    "\u026e\u0007\r\u0002\u0002\u026e\u0270\u0005T+\u0002\u026f\u026d\u0003",
    "\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002\u0002\u0270\u0272\u0003",
    "\u0002\u0002\u0002\u0271\u0273\u0005^0\u0002\u0272\u0271\u0003\u0002",
    "\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273\u0275\u0003\u0002",
    "\u0002\u0002\u0274\u0220\u0003\u0002\u0002\u0002\u0274\u0225\u0003\u0002",
    "\u0002\u0002\u0274\u022a\u0003\u0002\u0002\u0002\u0274\u022f\u0003\u0002",
    "\u0002\u0002\u0274\u0235\u0003\u0002\u0002\u0002\u0274\u0244\u0003\u0002",
    "\u0002\u0002\u0274\u0250\u0003\u0002\u0002\u0002\u0274\u0258\u0003\u0002",
    "\u0002\u0002\u0274\u025b\u0003\u0002\u0002\u0002\u0274\u0268\u0003\u0002",
    "\u0002\u0002\u0274\u0269\u0003\u0002\u0002\u0002\u0274\u026a\u0003\u0002",
    "\u0002\u0002\u0274\u026b\u0003\u0002\u0002\u0002\u0275W\u0003\u0002",
    "\u0002\u0002\u0276\u0277\t\u0006\u0002\u0002\u0277Y\u0003\u0002\u0002",
    "\u0002\u0278\u0279\t\u0007\u0002\u0002\u0279[\u0003\u0002\u0002\u0002",
    "\u027a\u027b\u0007`\u0002\u0002\u027b\u027c\u0005b2\u0002\u027c\u027d",
    "\u0007a\u0002\u0002\u027d\u027f\u0003\u0002\u0002\u0002\u027e\u027a",
    "\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002\u0002\u0280\u027e",
    "\u0003\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281]",
    "\u0003\u0002\u0002\u0002\u0282\u0283\u0007\f\u0002\u0002\u0283\u0285",
    "\u0005Z.\u0002\u0284\u0286\u0005`1\u0002\u0285\u0284\u0003\u0002\u0002",
    "\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0288\u0003\u0002\u0002",
    "\u0002\u0287\u0289\u0005\\/\u0002\u0288\u0287\u0003\u0002\u0002\u0002",
    "\u0288\u0289\u0003\u0002\u0002\u0002\u0289_\u0003\u0002\u0002\u0002",
    "\u028a\u028b\u0007^\u0002\u0002\u028b\u028c\u0005b2\u0002\u028c\u028d",
    "\u0007_\u0002\u0002\u028da\u0003\u0002\u0002\u0002\u028e\u0293\u0005",
    "d3\u0002\u028f\u0290\u0007c\u0002\u0002\u0290\u0292\u0005d3\u0002\u0291",
    "\u028f\u0003\u0002\u0002\u0002\u0292\u0295\u0003\u0002\u0002\u0002\u0293",
    "\u0291\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294",
    "c\u0003\u0002\u0002\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0296",
    "\u0298\u0005T+\u0002\u0297\u0296\u0003\u0002\u0002\u0002\u0297\u0298",
    "\u0003\u0002\u0002\u0002\u0298e\u0003\u0002\u0002\u0002\u0299\u029a",
    "\u0007c\u0002\u0002\u029ag\u0003\u0002\u0002\u0002\u029b\u02a2\u0007",
    "e\u0002\u0002\u029c\u02a2\u0007i\u0002\u0002\u029d\u02a2\u0007j\u0002",
    "\u0002\u029e\u02a2\u0007)\u0002\u0002\u029f\u02a2\u0007*\u0002\u0002",
    "\u02a0\u02a2\u0007+\u0002\u0002\u02a1\u029b\u0003\u0002\u0002\u0002",
    "\u02a1\u029c\u0003\u0002\u0002\u0002\u02a1\u029d\u0003\u0002\u0002\u0002",
    "\u02a1\u029e\u0003\u0002\u0002\u0002\u02a1\u029f\u0003\u0002\u0002\u0002",
    "\u02a1\u02a0\u0003\u0002\u0002\u0002\u02a2i\u0003\u0002\u0002\u0002",
    "\u02a3\u02a4\u00076\u0002\u0002\u02a4\u02a5\u0007^\u0002\u0002\u02a5",
    "\u02a6\u0005T+\u0002\u02a6\u02a8\u0007c\u0002\u0002\u02a7\u02a9\u0005",
    "T+\u0002\u02a8\u02a7\u0003\u0002\u0002\u0002\u02a8\u02a9\u0003\u0002",
    "\u0002\u0002\u02a9\u02aa\u0003\u0002\u0002\u0002\u02aa\u02ac\u0007c",
    "\u0002\u0002\u02ab\u02ad\u0005T+\u0002\u02ac\u02ab\u0003\u0002\u0002",
    "\u0002\u02ac\u02ad\u0003\u0002\u0002\u0002\u02ad\u02ae\u0003\u0002\u0002",
    "\u0002\u02ae\u02af\u0007_\u0002\u0002\u02afk\u0003\u0002\u0002\u0002",
    "\u02b0\u02b1\u00076\u0002\u0002\u02b1\u02b2\u0005T+\u0002\u02b2\u02b3",
    "\u0005~@\u0002\u02b3\u02bb\u0005J&\u0002\u02b4\u02b5\u00075\u0002\u0002",
    "\u02b5\u02b6\u0005T+\u0002\u02b6\u02b7\u0005~@\u0002\u02b7\u02b8\u0005",
    "J&\u0002\u02b8\u02ba\u0003\u0002\u0002\u0002\u02b9\u02b4\u0003\u0002",
    "\u0002\u0002\u02ba\u02bd\u0003\u0002\u0002\u0002\u02bb\u02b9\u0003\u0002",
    "\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02c4\u0003\u0002",
    "\u0002\u0002\u02bd\u02bb\u0003\u0002\u0002\u0002\u02be\u02bf\u00077",
    "\u0002\u0002\u02bf\u02c0\u0005~@\u0002\u02c0\u02c1\u0005J&\u0002\u02c1",
    "\u02c3\u0003\u0002\u0002\u0002\u02c2\u02be\u0003\u0002\u0002\u0002\u02c3",
    "\u02c6\u0003\u0002\u0002\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c4",
    "\u02c5\u0003\u0002\u0002\u0002\u02c5\u02cb\u0003\u0002\u0002\u0002\u02c6",
    "\u02c4\u0003\u0002\u0002\u0002\u02c7\u02cc\u00078\u0002\u0002\u02c8",
    "\u02cc\u0007:\u0002\u0002\u02c9\u02ca\u0007:\u0002\u0002\u02ca\u02cc",
    "\u00076\u0002\u0002\u02cb\u02c7\u0003\u0002\u0002\u0002\u02cb\u02c8",
    "\u0003\u0002\u0002\u0002\u02cb\u02c9\u0003\u0002\u0002\u0002\u02ccm",
    "\u0003\u0002\u0002\u0002\u02cd\u02ce\u00071\u0002\u0002\u02ce\u02cf",
    "\u0005|?\u0002\u02cf\u02d0\u0007(\u0002\u0002\u02d0\u02d3\u0005T+\u0002",
    "\u02d1\u02d2\u0007\'\u0002\u0002\u02d2\u02d4\u0005T+\u0002\u02d3\u02d1",
    "\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002\u0002\u0002\u02d4\u02d5",
    "\u0003\u0002\u0002\u0002\u02d5\u02d7\u0005~@\u0002\u02d6\u02d8\u0005",
    "J&\u0002\u02d7\u02d6\u0003\u0002\u0002\u0002\u02d7\u02d8\u0003\u0002",
    "\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9\u02db\u00072",
    "\u0002\u0002\u02da\u02dc\u0005T+\u0002\u02db\u02da\u0003\u0002\u0002",
    "\u0002\u02db\u02dc\u0003\u0002\u0002\u0002\u02dco\u0003\u0002\u0002",
    "\u0002\u02dd\u02e0\u00074\u0002\u0002\u02de\u02e1\u0005t;\u0002\u02df",
    "\u02e1\u0005v<\u0002\u02e0\u02de\u0003\u0002\u0002\u0002\u02e0\u02df",
    "\u0003\u0002\u0002\u0002\u02e1q\u0003\u0002\u0002\u0002\u02e2\u02e3",
    "\t\b\u0002\u0002\u02e3s\u0003\u0002\u0002\u0002\u02e4\u02e5\u00073\u0002",
    "\u0002\u02e5\u02e6\u0005T+\u0002\u02e6\u02e8\u0005~@\u0002\u02e7\u02e9",
    "\u0005J&\u0002\u02e8\u02e7\u0003\u0002\u0002\u0002\u02e8\u02e9\u0003",
    "\u0002\u0002\u0002\u02e9\u02ea\u0003\u0002\u0002\u0002\u02ea\u02ec\t",
    "\t\u0002\u0002\u02eb\u02ed\u0005~@\u0002\u02ec\u02eb\u0003\u0002\u0002",
    "\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002\u02edu\u0003\u0002\u0002",
    "\u0002\u02ee\u02ef\u0007;\u0002\u0002\u02ef\u02f6\u0005~@\u0002\u02f0",
    "\u02f1\u0007;\u0002\u0002\u02f1\u02f2\u0005T+\u0002\u02f2\u02f4\u0005",
    "~@\u0002\u02f3\u02f5\u0005J&\u0002\u02f4\u02f3\u0003\u0002\u0002\u0002",
    "\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5\u02f7\u0003\u0002\u0002\u0002",
    "\u02f6\u02f0\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003\u0002\u0002\u0002",
    "\u02f8\u02f6\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002",
    "\u02f9\u02fe\u0003\u0002\u0002\u0002\u02fa\u02fc\u0007=\u0002\u0002",
    "\u02fb\u02fd\u0005J&\u0002\u02fc\u02fb\u0003\u0002\u0002\u0002\u02fc",
    "\u02fd\u0003\u0002\u0002\u0002\u02fd\u02ff\u0003\u0002\u0002\u0002\u02fe",
    "\u02fa\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002\u02ff",
    "\u0306\u0003\u0002\u0002\u0002\u0300\u0307\u0007\u000f\u0002\u0002\u0301",
    "\u0307\u0007<\u0002\u0002\u0302\u0304\u0007:\u0002\u0002\u0303\u0305",
    "\u0007;\u0002\u0002\u0304\u0303\u0003\u0002\u0002\u0002\u0304\u0305",
    "\u0003\u0002\u0002\u0002\u0305\u0307\u0003\u0002\u0002\u0002\u0306\u0300",
    "\u0003\u0002\u0002\u0002\u0306\u0301\u0003\u0002\u0002\u0002\u0306\u0302",
    "\u0003\u0002\u0002\u0002\u0307\u0309\u0003\u0002\u0002\u0002\u0308\u030a",
    "\u0005~@\u0002\u0309\u0308\u0003\u0002\u0002\u0002\u0309\u030a\u0003",
    "\u0002\u0002\u0002\u030aw\u0003\u0002\u0002\u0002\u030b\u030e\u0005",
    "X-\u0002\u030c\u030e\u0005z>\u0002\u030d\u030b\u0003\u0002\u0002\u0002",
    "\u030d\u030c\u0003\u0002\u0002\u0002\u030e\u0318\u0003\u0002\u0002\u0002",
    "\u030f\u0319\u0005X-\u0002\u0310\u0315\u0005T+\u0002\u0311\u0312\u0007",
    "c\u0002\u0002\u0312\u0314\u0005T+\u0002\u0313\u0311\u0003\u0002\u0002",
    "\u0002\u0314\u0317\u0003\u0002\u0002\u0002\u0315\u0313\u0003\u0002\u0002",
    "\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316\u0319\u0003\u0002\u0002",
    "\u0002\u0317\u0315\u0003\u0002\u0002\u0002\u0318\u030f\u0003\u0002\u0002",
    "\u0002\u0318\u0310\u0003\u0002\u0002\u0002\u0319\u031a\u0003\u0002\u0002",
    "\u0002\u031a\u0318\u0003\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002",
    "\u0002\u031by\u0003\u0002\u0002\u0002\u031c\u031d\u0007#\u0002\u0002",
    "\u031d\u031e\u0005b2\u0002\u031e{\u0003\u0002\u0002\u0002\u031f\u0320",
    "\u0005Z.\u0002\u0320\u0321\t\n\u0002\u0002\u0321\u0322\u0005T+\u0002",
    "\u0322}\u0003\u0002\u0002\u0002\u0323\u0325\u0007k\u0002\u0002\u0324",
    "\u0323\u0003\u0002\u0002\u0002\u0325\u0326\u0003\u0002\u0002\u0002\u0326",
    "\u0324\u0003\u0002\u0002\u0002\u0326\u0327\u0003\u0002\u0002\u0002\u0327",
    "\u032a\u0003\u0002\u0002\u0002\u0328\u032a\u0007\u0010\u0002\u0002\u0329",
    "\u0324\u0003\u0002\u0002\u0002\u0329\u0328\u0003\u0002\u0002\u0002\u032a",
    "\u007f\u0003\u0002\u0002\u0002d\u0083\u0089\u008d\u0092\u009b\u00af",
    "\u00b9\u00bf\u00c5\u00cb\u00da\u00e2\u00e5\u00eb\u00f9\u00ff\u010e\u0112",
    "\u0119\u011c\u0122\u012f\u0136\u0138\u0145\u0148\u014e\u0156\u015c\u015f",
    "\u0163\u0166\u016f\u017e\u0180\u0189\u0191\u019a\u01a3\u01b0\u01b6\u01bd",
    "\u01c3\u01c6\u01c8\u01d8\u01dc\u01e7\u01ed\u01f3\u01f9\u020d\u0219\u021b",
    "\u021d\u0225\u022d\u0235\u0239\u023e\u0242\u0248\u024e\u0258\u0262\u026f",
    "\u0272\u0274\u0280\u0285\u0288\u0293\u0297\u02a1\u02a8\u02ac\u02bb\u02c4",
    "\u02cb\u02d3\u02d7\u02db\u02e0\u02e8\u02ec\u02f4\u02f8\u02fc\u02fe\u0304",
    "\u0306\u0309\u030d\u0315\u0318\u031a\u0326\u0329"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'CONSTRUCTOR'", "'{'", "'}'", "'|'", "'!'", 
                     "'-='", "'*='", "'/='", "'^'", "':'", "'.'", "'ENDD'", 
                     "'ENDC'", "';'", "'<'", "'>'", "'='", "'<='", "'>='", 
                     "'=='", "'!='", "'<>'", "'#'", "'$'", "'++'", "'--'", 
                     "'+='", "'+'", "'-'", "'*'", "'/'", "'%'", "'@'", "'&'", 
                     null, "'->'", "'STEP'", "'TO'", "'.T.'", "'.F.'", "'NIL'", 
                     "'#DEFINE'", "'#IFDEF'", "'#IFNDEF'", "'#ELSE'", "'#ENDIF'", 
                     "'FOR'", "'NEXT'", "'WHILE'", "'DO'", "'ELSEIF'", "'IF'", 
                     "'ELSE'", "'ENDIF'", "'ENDDO'", "'END'", "'CASE'", 
                     "'ENDCASE'", "'OTHERWISE'", "'EXIT'", "'LOOP'", "'LOCAL'", 
                     "'PRIVATE'", "'PUBLIC'", "'STATIC'", "'USER'", "'MAIN'", 
                     "'FUNCTION'", "'SELF'", "'.AND.'", "'.OR.'", "'DEFAULT'", 
                     "'RETURN'", "'ASSUME'", "'CLASS'", "'ENDCLASS'", "'METHOD'", 
                     "'DATA'", "'FROM'", "'WSCLIENT'", "'WSSERVICE'", "'NAMESPACE'", 
                     "'ENDWSCLIENT'", "'ENDWSSERVICE'", "'WSMETHOD'", "'WSDATA'", 
                     "'WSRECEIVE'", "'WSSEND'", "'DESCRIPTION'", "'AS'", 
                     "'OF'", "'('", "')'", "'['", "']'", null, "','", "':='" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, "MINOR", "MAJOR", 
                      "EQUALS", "MINOREQUALS", "MAJOREQUALS", "DOUBLEEQUAL", 
                      "DIF1", "DIF2", "DIF3", "CONTIDO", "PLUSPLUS", "MINUSMINUS", 
                      "PLUSEQUALS", "PLUS", "MINUS", "MULT", "DIV", "PERC", 
                      "ARROBA", "ECOMERCIAL", "BEGIN_SQL", "ALIASACCESS", 
                      "STEP", "TO", "TRUE", "FALSE", "NIL", "DEFINE", "IFDEF", 
                      "IFNDEF", "ELSEDEF", "ENDIFDEF", "FOR", "NEXT", "WHILE", 
                      "DO", "ELSEIF", "IF", "ELSE", "ENDIF", "ENDDO", "END", 
                      "CASE", "ENDCASE", "OTHERWISE", "EXIT", "LOOP", "LOCAL", 
                      "PRIVATE", "PUBLIC", "STATIC", "USER", "MAIN", "FUNCTION", 
                      "SELF", "AND", "OR", "DEFAULT", "RETURN", "ASSUME", 
                      "CLASS", "ENDCLASS", "METHOD", "DATA", "FROM", "WSCLIENT", 
                      "WSSERVICE", "NAMESPACE", "ENDWSCLIENT", "ENDWSSERVICE", 
                      "WSMETHOD", "WSDATA", "WSRECEIVE", "WSSEND", "DESCRIPTION", 
                      "AS", "OF", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
                      "INCLUDE", "COMMA", "ATTRIB_OPERATOR", "NUMBER", "IDENTIFIER", 
                      "COMMENT", "LINE_COMMENT", "STRING", "STRINGSIMPLE", 
                      "CRLF", "WS", "CRLF_ESCAPED" ];

var ruleNames =  [ "program", "preprocessorDeclaration", "includeDeclaration", 
                   "ifdef", "defineDeclaration", "sources", "modifiersFunction", 
                   "staticVariable", "classDeclaration", "fromClass", "dataDefinition", 
                   "methodDefinition", "methodBody", "wsServiceDeclaration", 
                   "wsdataDefinition", "wsmethodDefinition", "wsmethodBody", 
                   "wsReceive", "wsSend", "wsDataType", "wsServiceClientDeclaration", 
                   "wsmethodClientDefinition", "wsmethodClientBody", "endWSMethod", 
                   "funcDeclaration", "formalParameters", "formalParameter", 
                   "initFuncOrMethod", "staticVariableBeforeLocal", "localVariableDeclarationStatement", 
                   "staticVariableDeclarationStatement", "publicVariableDeclarationStatement", 
                   "privateVariableDeclarationStatement", "defaultStatement", 
                   "arrayOrBlockInitializer", "blockParams", "block", "statement", 
                   "returnStatement", "returnvalues", "statementExpression", 
                   "expression", "primary", "chIdentifier", "identifier", 
                   "arrayAccess", "methodAccessLoop", "arguments", "expressionList", 
                   "optionalExpression", "expressionListComa", "literal", 
                   "ifFunctioncall", "ifStatement", "forStatement", "doStatement", 
                   "exitOrLoopStatement", "whileStatement", "docaseStatement", 
                   "chStatement", "arrobaDefine", "forInit", "crlf" ];

function AdvplParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

AdvplParser.prototype = Object.create(antlr4.Parser.prototype);
AdvplParser.prototype.constructor = AdvplParser;

Object.defineProperty(AdvplParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

AdvplParser.EOF = antlr4.Token.EOF;
AdvplParser.T__0 = 1;
AdvplParser.T__1 = 2;
AdvplParser.T__2 = 3;
AdvplParser.T__3 = 4;
AdvplParser.T__4 = 5;
AdvplParser.T__5 = 6;
AdvplParser.T__6 = 7;
AdvplParser.T__7 = 8;
AdvplParser.T__8 = 9;
AdvplParser.T__9 = 10;
AdvplParser.T__10 = 11;
AdvplParser.T__11 = 12;
AdvplParser.T__12 = 13;
AdvplParser.T__13 = 14;
AdvplParser.MINOR = 15;
AdvplParser.MAJOR = 16;
AdvplParser.EQUALS = 17;
AdvplParser.MINOREQUALS = 18;
AdvplParser.MAJOREQUALS = 19;
AdvplParser.DOUBLEEQUAL = 20;
AdvplParser.DIF1 = 21;
AdvplParser.DIF2 = 22;
AdvplParser.DIF3 = 23;
AdvplParser.CONTIDO = 24;
AdvplParser.PLUSPLUS = 25;
AdvplParser.MINUSMINUS = 26;
AdvplParser.PLUSEQUALS = 27;
AdvplParser.PLUS = 28;
AdvplParser.MINUS = 29;
AdvplParser.MULT = 30;
AdvplParser.DIV = 31;
AdvplParser.PERC = 32;
AdvplParser.ARROBA = 33;
AdvplParser.ECOMERCIAL = 34;
AdvplParser.BEGIN_SQL = 35;
AdvplParser.ALIASACCESS = 36;
AdvplParser.STEP = 37;
AdvplParser.TO = 38;
AdvplParser.TRUE = 39;
AdvplParser.FALSE = 40;
AdvplParser.NIL = 41;
AdvplParser.DEFINE = 42;
AdvplParser.IFDEF = 43;
AdvplParser.IFNDEF = 44;
AdvplParser.ELSEDEF = 45;
AdvplParser.ENDIFDEF = 46;
AdvplParser.FOR = 47;
AdvplParser.NEXT = 48;
AdvplParser.WHILE = 49;
AdvplParser.DO = 50;
AdvplParser.ELSEIF = 51;
AdvplParser.IF = 52;
AdvplParser.ELSE = 53;
AdvplParser.ENDIF = 54;
AdvplParser.ENDDO = 55;
AdvplParser.END = 56;
AdvplParser.CASE = 57;
AdvplParser.ENDCASE = 58;
AdvplParser.OTHERWISE = 59;
AdvplParser.EXIT = 60;
AdvplParser.LOOP = 61;
AdvplParser.LOCAL = 62;
AdvplParser.PRIVATE = 63;
AdvplParser.PUBLIC = 64;
AdvplParser.STATIC = 65;
AdvplParser.USER = 66;
AdvplParser.MAIN = 67;
AdvplParser.FUNCTION = 68;
AdvplParser.SELF = 69;
AdvplParser.AND = 70;
AdvplParser.OR = 71;
AdvplParser.DEFAULT = 72;
AdvplParser.RETURN = 73;
AdvplParser.ASSUME = 74;
AdvplParser.CLASS = 75;
AdvplParser.ENDCLASS = 76;
AdvplParser.METHOD = 77;
AdvplParser.DATA = 78;
AdvplParser.FROM = 79;
AdvplParser.WSCLIENT = 80;
AdvplParser.WSSERVICE = 81;
AdvplParser.NAMESPACE = 82;
AdvplParser.ENDWSCLIENT = 83;
AdvplParser.ENDWSSERVICE = 84;
AdvplParser.WSMETHOD = 85;
AdvplParser.WSDATA = 86;
AdvplParser.WSRECEIVE = 87;
AdvplParser.WSSEND = 88;
AdvplParser.DESCRIPTION = 89;
AdvplParser.AS = 90;
AdvplParser.OF = 91;
AdvplParser.LPAREN = 92;
AdvplParser.RPAREN = 93;
AdvplParser.LBRACK = 94;
AdvplParser.RBRACK = 95;
AdvplParser.INCLUDE = 96;
AdvplParser.COMMA = 97;
AdvplParser.ATTRIB_OPERATOR = 98;
AdvplParser.NUMBER = 99;
AdvplParser.IDENTIFIER = 100;
AdvplParser.COMMENT = 101;
AdvplParser.LINE_COMMENT = 102;
AdvplParser.STRING = 103;
AdvplParser.STRINGSIMPLE = 104;
AdvplParser.CRLF = 105;
AdvplParser.WS = 106;
AdvplParser.CRLF_ESCAPED = 107;

AdvplParser.RULE_program = 0;
AdvplParser.RULE_preprocessorDeclaration = 1;
AdvplParser.RULE_includeDeclaration = 2;
AdvplParser.RULE_ifdef = 3;
AdvplParser.RULE_defineDeclaration = 4;
AdvplParser.RULE_sources = 5;
AdvplParser.RULE_modifiersFunction = 6;
AdvplParser.RULE_staticVariable = 7;
AdvplParser.RULE_classDeclaration = 8;
AdvplParser.RULE_fromClass = 9;
AdvplParser.RULE_dataDefinition = 10;
AdvplParser.RULE_methodDefinition = 11;
AdvplParser.RULE_methodBody = 12;
AdvplParser.RULE_wsServiceDeclaration = 13;
AdvplParser.RULE_wsdataDefinition = 14;
AdvplParser.RULE_wsmethodDefinition = 15;
AdvplParser.RULE_wsmethodBody = 16;
AdvplParser.RULE_wsReceive = 17;
AdvplParser.RULE_wsSend = 18;
AdvplParser.RULE_wsDataType = 19;
AdvplParser.RULE_wsServiceClientDeclaration = 20;
AdvplParser.RULE_wsmethodClientDefinition = 21;
AdvplParser.RULE_wsmethodClientBody = 22;
AdvplParser.RULE_endWSMethod = 23;
AdvplParser.RULE_funcDeclaration = 24;
AdvplParser.RULE_formalParameters = 25;
AdvplParser.RULE_formalParameter = 26;
AdvplParser.RULE_initFuncOrMethod = 27;
AdvplParser.RULE_staticVariableBeforeLocal = 28;
AdvplParser.RULE_localVariableDeclarationStatement = 29;
AdvplParser.RULE_staticVariableDeclarationStatement = 30;
AdvplParser.RULE_publicVariableDeclarationStatement = 31;
AdvplParser.RULE_privateVariableDeclarationStatement = 32;
AdvplParser.RULE_defaultStatement = 33;
AdvplParser.RULE_arrayOrBlockInitializer = 34;
AdvplParser.RULE_blockParams = 35;
AdvplParser.RULE_block = 36;
AdvplParser.RULE_statement = 37;
AdvplParser.RULE_returnStatement = 38;
AdvplParser.RULE_returnvalues = 39;
AdvplParser.RULE_statementExpression = 40;
AdvplParser.RULE_expression = 41;
AdvplParser.RULE_primary = 42;
AdvplParser.RULE_chIdentifier = 43;
AdvplParser.RULE_identifier = 44;
AdvplParser.RULE_arrayAccess = 45;
AdvplParser.RULE_methodAccessLoop = 46;
AdvplParser.RULE_arguments = 47;
AdvplParser.RULE_expressionList = 48;
AdvplParser.RULE_optionalExpression = 49;
AdvplParser.RULE_expressionListComa = 50;
AdvplParser.RULE_literal = 51;
AdvplParser.RULE_ifFunctioncall = 52;
AdvplParser.RULE_ifStatement = 53;
AdvplParser.RULE_forStatement = 54;
AdvplParser.RULE_doStatement = 55;
AdvplParser.RULE_exitOrLoopStatement = 56;
AdvplParser.RULE_whileStatement = 57;
AdvplParser.RULE_docaseStatement = 58;
AdvplParser.RULE_chStatement = 59;
AdvplParser.RULE_arrobaDefine = 60;
AdvplParser.RULE_forInit = 61;
AdvplParser.RULE_crlf = 62;

function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.preprocessorDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PreprocessorDeclarationContext);
    } else {
        return this.getTypedRuleContext(PreprocessorDeclarationContext,i);
    }
};

ProgramContext.prototype.sources = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SourcesContext);
    } else {
        return this.getTypedRuleContext(SourcesContext,i);
    }
};

ProgramContext.prototype.EOF = function() {
    return this.getToken(AdvplParser.EOF, 0);
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitProgram(this);
	}
};




AdvplParser.ProgramContext = ProgramContext;

AdvplParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, AdvplParser.RULE_program);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 129;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 126;
                this.preprocessorDeclaration(); 
            }
            this.state = 131;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
        }

        this.state = 135;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.T__13 || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (AdvplParser.DEFINE - 42)) | (1 << (AdvplParser.IFDEF - 42)) | (1 << (AdvplParser.IFNDEF - 42)) | (1 << (AdvplParser.ELSEDEF - 42)) | (1 << (AdvplParser.ENDIFDEF - 42)) | (1 << (AdvplParser.STATIC - 42)) | (1 << (AdvplParser.USER - 42)) | (1 << (AdvplParser.MAIN - 42)) | (1 << (AdvplParser.FUNCTION - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (AdvplParser.CLASS - 75)) | (1 << (AdvplParser.METHOD - 75)) | (1 << (AdvplParser.WSCLIENT - 75)) | (1 << (AdvplParser.WSSERVICE - 75)) | (1 << (AdvplParser.WSMETHOD - 75)) | (1 << (AdvplParser.CRLF - 75)))) !== 0)) {
            this.state = 132;
            this.sources();
            this.state = 137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 139;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        if(la_===1) {
            this.state = 138;
            this.match(AdvplParser.EOF);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PreprocessorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_preprocessorDeclaration;
    return this;
}

PreprocessorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreprocessorDeclarationContext.prototype.constructor = PreprocessorDeclarationContext;

PreprocessorDeclarationContext.prototype.includeDeclaration = function() {
    return this.getTypedRuleContext(IncludeDeclarationContext,0);
};

PreprocessorDeclarationContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

PreprocessorDeclarationContext.prototype.staticVariable = function() {
    return this.getTypedRuleContext(StaticVariableContext,0);
};

PreprocessorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterPreprocessorDeclaration(this);
	}
};

PreprocessorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitPreprocessorDeclaration(this);
	}
};




AdvplParser.PreprocessorDeclarationContext = PreprocessorDeclarationContext;

AdvplParser.prototype.preprocessorDeclaration = function() {

    var localctx = new PreprocessorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, AdvplParser.RULE_preprocessorDeclaration);
    try {
        this.state = 144;
        switch(this._input.LA(1)) {
        case AdvplParser.INCLUDE:
            this.enterOuterAlt(localctx, 1);
            this.state = 141;
            this.includeDeclaration();
            break;
        case AdvplParser.T__13:
        case AdvplParser.CRLF:
            this.enterOuterAlt(localctx, 2);
            this.state = 142;
            this.crlf();
            break;
        case AdvplParser.STATIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 143;
            this.staticVariable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IncludeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_includeDeclaration;
    return this;
}

IncludeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeDeclarationContext.prototype.constructor = IncludeDeclarationContext;

IncludeDeclarationContext.prototype.INCLUDE = function() {
    return this.getToken(AdvplParser.INCLUDE, 0);
};

IncludeDeclarationContext.prototype.STRINGSIMPLE = function() {
    return this.getToken(AdvplParser.STRINGSIMPLE, 0);
};

IncludeDeclarationContext.prototype.STRING = function() {
    return this.getToken(AdvplParser.STRING, 0);
};

IncludeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterIncludeDeclaration(this);
	}
};

IncludeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitIncludeDeclaration(this);
	}
};




AdvplParser.IncludeDeclarationContext = IncludeDeclarationContext;

AdvplParser.prototype.includeDeclaration = function() {

    var localctx = new IncludeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, AdvplParser.RULE_includeDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 146;
        this.match(AdvplParser.INCLUDE);
        this.state = 147;
        _la = this._input.LA(1);
        if(!(_la===AdvplParser.STRING || _la===AdvplParser.STRINGSIMPLE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_ifdef;
    return this;
}

IfdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfdefContext.prototype.constructor = IfdefContext;

IfdefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfdefContext.prototype.IFDEF = function() {
    return this.getToken(AdvplParser.IFDEF, 0);
};

IfdefContext.prototype.IFNDEF = function() {
    return this.getToken(AdvplParser.IFNDEF, 0);
};

IfdefContext.prototype.ELSEDEF = function() {
    return this.getToken(AdvplParser.ELSEDEF, 0);
};

IfdefContext.prototype.ENDIFDEF = function() {
    return this.getToken(AdvplParser.ENDIFDEF, 0);
};

IfdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterIfdef(this);
	}
};

IfdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitIfdef(this);
	}
};




AdvplParser.IfdefContext = IfdefContext;

AdvplParser.prototype.ifdef = function() {

    var localctx = new IfdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, AdvplParser.RULE_ifdef);
    var _la = 0; // Token type
    try {
        this.state = 153;
        switch(this._input.LA(1)) {
        case AdvplParser.IFDEF:
        case AdvplParser.IFNDEF:
            this.enterOuterAlt(localctx, 1);
            this.state = 149;
            _la = this._input.LA(1);
            if(!(_la===AdvplParser.IFDEF || _la===AdvplParser.IFNDEF)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 150;
            this.expression(0);
            break;
        case AdvplParser.ELSEDEF:
            this.enterOuterAlt(localctx, 2);
            this.state = 151;
            this.match(AdvplParser.ELSEDEF);
            break;
        case AdvplParser.ENDIFDEF:
            this.enterOuterAlt(localctx, 3);
            this.state = 152;
            this.match(AdvplParser.ENDIFDEF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefineDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_defineDeclaration;
    return this;
}

DefineDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefineDeclarationContext.prototype.constructor = DefineDeclarationContext;

DefineDeclarationContext.prototype.DEFINE = function() {
    return this.getToken(AdvplParser.DEFINE, 0);
};

DefineDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DefineDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DefineDeclarationContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

DefineDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterDefineDeclaration(this);
	}
};

DefineDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitDefineDeclaration(this);
	}
};




AdvplParser.DefineDeclarationContext = DefineDeclarationContext;

AdvplParser.prototype.defineDeclaration = function() {

    var localctx = new DefineDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, AdvplParser.RULE_defineDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 155;
        this.match(AdvplParser.DEFINE);
        this.state = 156;
        this.identifier();
        this.state = 157;
        this.expression(0);
        this.state = 158;
        this.crlf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_sources;
    return this;
}

SourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourcesContext.prototype.constructor = SourcesContext;

SourcesContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

SourcesContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

SourcesContext.prototype.funcDeclaration = function() {
    return this.getTypedRuleContext(FuncDeclarationContext,0);
};

SourcesContext.prototype.wsServiceDeclaration = function() {
    return this.getTypedRuleContext(WsServiceDeclarationContext,0);
};

SourcesContext.prototype.wsmethodBody = function() {
    return this.getTypedRuleContext(WsmethodBodyContext,0);
};

SourcesContext.prototype.staticVariable = function() {
    return this.getTypedRuleContext(StaticVariableContext,0);
};

SourcesContext.prototype.wsServiceClientDeclaration = function() {
    return this.getTypedRuleContext(WsServiceClientDeclarationContext,0);
};

SourcesContext.prototype.wsmethodClientBody = function() {
    return this.getTypedRuleContext(WsmethodClientBodyContext,0);
};

SourcesContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

SourcesContext.prototype.defineDeclaration = function() {
    return this.getTypedRuleContext(DefineDeclarationContext,0);
};

SourcesContext.prototype.ifdef = function() {
    return this.getTypedRuleContext(IfdefContext,0);
};

SourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterSources(this);
	}
};

SourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitSources(this);
	}
};




AdvplParser.SourcesContext = SourcesContext;

AdvplParser.prototype.sources = function() {

    var localctx = new SourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, AdvplParser.RULE_sources);
    try {
        this.state = 173;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 160;
            this.classDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 161;
            this.methodBody();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 162;
            this.funcDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 163;
            this.wsServiceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 164;
            this.wsmethodBody();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 165;
            this.staticVariable();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 166;
            this.wsServiceClientDeclaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 167;
            this.wsmethodClientBody();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 168;
            this.crlf();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 169;
            this.defineDeclaration();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 170;
            this.ifdef();
            this.state = 171;
            this.crlf();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifiersFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_modifiersFunction;
    return this;
}

ModifiersFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifiersFunctionContext.prototype.constructor = ModifiersFunctionContext;

ModifiersFunctionContext.prototype.USER = function() {
    return this.getToken(AdvplParser.USER, 0);
};

ModifiersFunctionContext.prototype.STATIC = function() {
    return this.getToken(AdvplParser.STATIC, 0);
};

ModifiersFunctionContext.prototype.MAIN = function() {
    return this.getToken(AdvplParser.MAIN, 0);
};

ModifiersFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterModifiersFunction(this);
	}
};

ModifiersFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitModifiersFunction(this);
	}
};




AdvplParser.ModifiersFunctionContext = ModifiersFunctionContext;

AdvplParser.prototype.modifiersFunction = function() {

    var localctx = new ModifiersFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, AdvplParser.RULE_modifiersFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 175;
        _la = this._input.LA(1);
        if(!(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (AdvplParser.STATIC - 65)) | (1 << (AdvplParser.USER - 65)) | (1 << (AdvplParser.MAIN - 65)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StaticVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_staticVariable;
    return this;
}

StaticVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StaticVariableContext.prototype.constructor = StaticVariableContext;

StaticVariableContext.prototype.STATIC = function() {
    return this.getToken(AdvplParser.STATIC, 0);
};

StaticVariableContext.prototype.staticVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(StaticVariableDeclarationStatementContext,0);
};

StaticVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterStaticVariable(this);
	}
};

StaticVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitStaticVariable(this);
	}
};




AdvplParser.StaticVariableContext = StaticVariableContext;

AdvplParser.prototype.staticVariable = function() {

    var localctx = new StaticVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, AdvplParser.RULE_staticVariable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 177;
        this.match(AdvplParser.STATIC);
        this.state = 178;
        this.staticVariableDeclarationStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.CLASS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.CLASS);
    } else {
        return this.getToken(AdvplParser.CLASS, i);
    }
};


ClassDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassDeclarationContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

ClassDeclarationContext.prototype.ENDCLASS = function() {
    return this.getToken(AdvplParser.ENDCLASS, 0);
};

ClassDeclarationContext.prototype.fromClass = function() {
    return this.getTypedRuleContext(FromClassContext,0);
};

ClassDeclarationContext.prototype.dataDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataDefinitionContext);
    } else {
        return this.getTypedRuleContext(DataDefinitionContext,i);
    }
};

ClassDeclarationContext.prototype.methodDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodDefinitionContext);
    } else {
        return this.getTypedRuleContext(MethodDefinitionContext,i);
    }
};

ClassDeclarationContext.prototype.END = function() {
    return this.getToken(AdvplParser.END, 0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitClassDeclaration(this);
	}
};




AdvplParser.ClassDeclarationContext = ClassDeclarationContext;

AdvplParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, AdvplParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 180;
        this.match(AdvplParser.CLASS);
        this.state = 181;
        this.identifier();
        this.state = 183;
        _la = this._input.LA(1);
        if(_la===AdvplParser.FROM) {
            this.state = 182;
            this.fromClass();
        }

        this.state = 185;
        this.crlf();
        this.state = 189;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.DATA) {
            this.state = 186;
            this.dataDefinition();
            this.state = 191;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.METHOD) {
            this.state = 192;
            this.methodDefinition();
            this.state = 197;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 201;
        switch(this._input.LA(1)) {
        case AdvplParser.ENDCLASS:
            this.state = 198;
            this.match(AdvplParser.ENDCLASS);
            break;
        case AdvplParser.END:
            this.state = 199;
            this.match(AdvplParser.END);
            this.state = 200;
            this.match(AdvplParser.CLASS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 203;
        this.crlf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromClassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_fromClass;
    return this;
}

FromClassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClassContext.prototype.constructor = FromClassContext;

FromClassContext.prototype.FROM = function() {
    return this.getToken(AdvplParser.FROM, 0);
};

FromClassContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FromClassContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterFromClass(this);
	}
};

FromClassContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitFromClass(this);
	}
};




AdvplParser.FromClassContext = FromClassContext;

AdvplParser.prototype.fromClass = function() {

    var localctx = new FromClassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, AdvplParser.RULE_fromClass);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        this.match(AdvplParser.FROM);
        this.state = 206;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_dataDefinition;
    return this;
}

DataDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataDefinitionContext.prototype.constructor = DataDefinitionContext;

DataDefinitionContext.prototype.DATA = function() {
    return this.getToken(AdvplParser.DATA, 0);
};

DataDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DataDefinitionContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

DataDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterDataDefinition(this);
	}
};

DataDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitDataDefinition(this);
	}
};




AdvplParser.DataDefinitionContext = DataDefinitionContext;

AdvplParser.prototype.dataDefinition = function() {

    var localctx = new DataDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, AdvplParser.RULE_dataDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 208;
        this.match(AdvplParser.DATA);
        this.state = 209;
        this.identifier();
        this.state = 210;
        this.crlf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.METHOD = function() {
    return this.getToken(AdvplParser.METHOD, 0);
};

MethodDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

MethodDefinitionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

MethodDefinitionContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterMethodDefinition(this);
	}
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitMethodDefinition(this);
	}
};




AdvplParser.MethodDefinitionContext = MethodDefinitionContext;

AdvplParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, AdvplParser.RULE_methodDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 212;
        this.match(AdvplParser.METHOD);
        this.state = 213;
        this.identifier();
        this.state = 214;
        this.arguments();
        this.state = 216;
        _la = this._input.LA(1);
        if(_la===AdvplParser.T__0) {
            this.state = 215;
            this.match(AdvplParser.T__0);
        }

        this.state = 218;
        this.crlf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.METHOD = function() {
    return this.getToken(AdvplParser.METHOD, 0);
};

MethodBodyContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

MethodBodyContext.prototype.CLASS = function() {
    return this.getToken(AdvplParser.CLASS, 0);
};

MethodBodyContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

MethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodBodyContext.prototype.LPAREN = function() {
    return this.getToken(AdvplParser.LPAREN, 0);
};

MethodBodyContext.prototype.RPAREN = function() {
    return this.getToken(AdvplParser.RPAREN, 0);
};

MethodBodyContext.prototype.initFuncOrMethod = function() {
    return this.getTypedRuleContext(InitFuncOrMethodContext,0);
};

MethodBodyContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

MethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterMethodBody(this);
	}
};

MethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitMethodBody(this);
	}
};




AdvplParser.MethodBodyContext = MethodBodyContext;

AdvplParser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, AdvplParser.RULE_methodBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 220;
        this.match(AdvplParser.METHOD);
        this.state = 221;
        this.identifier();
        this.state = 227;
        _la = this._input.LA(1);
        if(_la===AdvplParser.LPAREN) {
            this.state = 222;
            this.match(AdvplParser.LPAREN);
            this.state = 224;
            _la = this._input.LA(1);
            if(_la===AdvplParser.T__9 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (AdvplParser.TO - 38)) | (1 << (AdvplParser.NEXT - 38)) | (1 << (AdvplParser.END - 38)) | (1 << (AdvplParser.SELF - 38)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) !== 0)) {
                this.state = 223;
                this.formalParameters();
            }

            this.state = 226;
            this.match(AdvplParser.RPAREN);
        }

        this.state = 229;
        this.match(AdvplParser.CLASS);
        this.state = 230;
        this.identifier();
        this.state = 231;
        this.crlf();
        this.state = 233;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 232;
            this.initFuncOrMethod();

        }
        this.state = 235;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsServiceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsServiceDeclaration;
    return this;
}

WsServiceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsServiceDeclarationContext.prototype.constructor = WsServiceDeclarationContext;

WsServiceDeclarationContext.prototype.WSSERVICE = function() {
    return this.getToken(AdvplParser.WSSERVICE, 0);
};

WsServiceDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

WsServiceDeclarationContext.prototype.DESCRIPTION = function() {
    return this.getToken(AdvplParser.DESCRIPTION, 0);
};

WsServiceDeclarationContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

WsServiceDeclarationContext.prototype.NAMESPACE = function() {
    return this.getToken(AdvplParser.NAMESPACE, 0);
};

WsServiceDeclarationContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

WsServiceDeclarationContext.prototype.ENDWSSERVICE = function() {
    return this.getToken(AdvplParser.ENDWSSERVICE, 0);
};

WsServiceDeclarationContext.prototype.wsdataDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsdataDefinitionContext);
    } else {
        return this.getTypedRuleContext(WsdataDefinitionContext,i);
    }
};

WsServiceDeclarationContext.prototype.wsmethodDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsmethodDefinitionContext);
    } else {
        return this.getTypedRuleContext(WsmethodDefinitionContext,i);
    }
};

WsServiceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsServiceDeclaration(this);
	}
};

WsServiceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsServiceDeclaration(this);
	}
};




AdvplParser.WsServiceDeclarationContext = WsServiceDeclarationContext;

AdvplParser.prototype.wsServiceDeclaration = function() {

    var localctx = new WsServiceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, AdvplParser.RULE_wsServiceDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 237;
        this.match(AdvplParser.WSSERVICE);
        this.state = 238;
        this.identifier();
        this.state = 239;
        this.match(AdvplParser.DESCRIPTION);
        this.state = 240;
        this.literal();
        this.state = 241;
        this.match(AdvplParser.NAMESPACE);
        this.state = 242;
        this.literal();
        this.state = 243;
        this.crlf();
        this.state = 247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.WSDATA) {
            this.state = 244;
            this.wsdataDefinition();
            this.state = 249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 253;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.WSMETHOD) {
            this.state = 250;
            this.wsmethodDefinition();
            this.state = 255;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 256;
        this.match(AdvplParser.ENDWSSERVICE);
        this.state = 257;
        this.crlf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsdataDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsdataDefinition;
    return this;
}

WsdataDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsdataDefinitionContext.prototype.constructor = WsdataDefinitionContext;

WsdataDefinitionContext.prototype.WSDATA = function() {
    return this.getToken(AdvplParser.WSDATA, 0);
};

WsdataDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

WsdataDefinitionContext.prototype.AS = function() {
    return this.getToken(AdvplParser.AS, 0);
};

WsdataDefinitionContext.prototype.wsDataType = function() {
    return this.getTypedRuleContext(WsDataTypeContext,0);
};

WsdataDefinitionContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

WsdataDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsdataDefinition(this);
	}
};

WsdataDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsdataDefinition(this);
	}
};




AdvplParser.WsdataDefinitionContext = WsdataDefinitionContext;

AdvplParser.prototype.wsdataDefinition = function() {

    var localctx = new WsdataDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, AdvplParser.RULE_wsdataDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        this.match(AdvplParser.WSDATA);
        this.state = 260;
        this.identifier();
        this.state = 261;
        this.match(AdvplParser.AS);
        this.state = 262;
        this.wsDataType();
        this.state = 263;
        this.crlf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsmethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsmethodDefinition;
    return this;
}

WsmethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsmethodDefinitionContext.prototype.constructor = WsmethodDefinitionContext;

WsmethodDefinitionContext.prototype.WSMETHOD = function() {
    return this.getToken(AdvplParser.WSMETHOD, 0);
};

WsmethodDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

WsmethodDefinitionContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

WsmethodDefinitionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

WsmethodDefinitionContext.prototype.DESCRIPTION = function() {
    return this.getToken(AdvplParser.DESCRIPTION, 0);
};

WsmethodDefinitionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

WsmethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsmethodDefinition(this);
	}
};

WsmethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsmethodDefinition(this);
	}
};




AdvplParser.WsmethodDefinitionContext = WsmethodDefinitionContext;

AdvplParser.prototype.wsmethodDefinition = function() {

    var localctx = new WsmethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, AdvplParser.RULE_wsmethodDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 265;
        this.match(AdvplParser.WSMETHOD);
        this.state = 266;
        this.identifier();
        this.state = 268;
        _la = this._input.LA(1);
        if(_la===AdvplParser.LPAREN) {
            this.state = 267;
            this.arguments();
        }

        this.state = 272;
        _la = this._input.LA(1);
        if(_la===AdvplParser.DESCRIPTION) {
            this.state = 270;
            this.match(AdvplParser.DESCRIPTION);
            this.state = 271;
            this.literal();
        }

        this.state = 274;
        this.crlf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsmethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsmethodBody;
    return this;
}

WsmethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsmethodBodyContext.prototype.constructor = WsmethodBodyContext;

WsmethodBodyContext.prototype.WSMETHOD = function() {
    return this.getToken(AdvplParser.WSMETHOD, 0);
};

WsmethodBodyContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

WsmethodBodyContext.prototype.WSSERVICE = function() {
    return this.getToken(AdvplParser.WSSERVICE, 0);
};

WsmethodBodyContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

WsmethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

WsmethodBodyContext.prototype.wsReceive = function() {
    return this.getTypedRuleContext(WsReceiveContext,0);
};

WsmethodBodyContext.prototype.wsSend = function() {
    return this.getTypedRuleContext(WsSendContext,0);
};

WsmethodBodyContext.prototype.initFuncOrMethod = function() {
    return this.getTypedRuleContext(InitFuncOrMethodContext,0);
};

WsmethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsmethodBody(this);
	}
};

WsmethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsmethodBody(this);
	}
};




AdvplParser.WsmethodBodyContext = WsmethodBodyContext;

AdvplParser.prototype.wsmethodBody = function() {

    var localctx = new WsmethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, AdvplParser.RULE_wsmethodBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 276;
        this.match(AdvplParser.WSMETHOD);
        this.state = 277;
        this.identifier();
        this.state = 279;
        _la = this._input.LA(1);
        if(_la===AdvplParser.WSRECEIVE) {
            this.state = 278;
            this.wsReceive();
        }

        this.state = 282;
        _la = this._input.LA(1);
        if(_la===AdvplParser.WSSEND) {
            this.state = 281;
            this.wsSend();
        }

        this.state = 284;
        this.match(AdvplParser.WSSERVICE);
        this.state = 285;
        this.identifier();
        this.state = 286;
        this.crlf();
        this.state = 288;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        if(la_===1) {
            this.state = 287;
            this.initFuncOrMethod();

        }
        this.state = 290;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsReceiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsReceive;
    return this;
}

WsReceiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsReceiveContext.prototype.constructor = WsReceiveContext;

WsReceiveContext.prototype.WSRECEIVE = function() {
    return this.getToken(AdvplParser.WSRECEIVE, 0);
};

WsReceiveContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

WsReceiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsReceive(this);
	}
};

WsReceiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsReceive(this);
	}
};




AdvplParser.WsReceiveContext = WsReceiveContext;

AdvplParser.prototype.wsReceive = function() {

    var localctx = new WsReceiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, AdvplParser.RULE_wsReceive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        this.match(AdvplParser.WSRECEIVE);
        this.state = 293;
        this.formalParameters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsSendContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsSend;
    return this;
}

WsSendContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsSendContext.prototype.constructor = WsSendContext;

WsSendContext.prototype.WSSEND = function() {
    return this.getToken(AdvplParser.WSSEND, 0);
};

WsSendContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

WsSendContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsSend(this);
	}
};

WsSendContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsSend(this);
	}
};




AdvplParser.WsSendContext = WsSendContext;

AdvplParser.prototype.wsSend = function() {

    var localctx = new WsSendContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, AdvplParser.RULE_wsSend);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 295;
        this.match(AdvplParser.WSSEND);
        this.state = 296;
        this.formalParameters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsDataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsDataType;
    return this;
}

WsDataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsDataTypeContext.prototype.constructor = WsDataTypeContext;

WsDataTypeContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

WsDataTypeContext.prototype.OF = function() {
    return this.getToken(AdvplParser.OF, 0);
};

WsDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsDataType(this);
	}
};

WsDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsDataType(this);
	}
};




AdvplParser.WsDataTypeContext = WsDataTypeContext;

AdvplParser.prototype.wsDataType = function() {

    var localctx = new WsDataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, AdvplParser.RULE_wsDataType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 298;
        this.identifier();
        this.state = 301;
        _la = this._input.LA(1);
        if(_la===AdvplParser.OF) {
            this.state = 299;
            this.match(AdvplParser.OF);
            this.state = 300;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsServiceClientDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsServiceClientDeclaration;
    return this;
}

WsServiceClientDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsServiceClientDeclarationContext.prototype.constructor = WsServiceClientDeclarationContext;

WsServiceClientDeclarationContext.prototype.WSCLIENT = function() {
    return this.getToken(AdvplParser.WSCLIENT, 0);
};

WsServiceClientDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

WsServiceClientDeclarationContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

WsServiceClientDeclarationContext.prototype.ENDWSCLIENT = function() {
    return this.getToken(AdvplParser.ENDWSCLIENT, 0);
};

WsServiceClientDeclarationContext.prototype.wsdataDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsdataDefinitionContext);
    } else {
        return this.getTypedRuleContext(WsdataDefinitionContext,i);
    }
};

WsServiceClientDeclarationContext.prototype.wsmethodClientDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsmethodClientDefinitionContext);
    } else {
        return this.getTypedRuleContext(WsmethodClientDefinitionContext,i);
    }
};

WsServiceClientDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsServiceClientDeclaration(this);
	}
};

WsServiceClientDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsServiceClientDeclaration(this);
	}
};




AdvplParser.WsServiceClientDeclarationContext = WsServiceClientDeclarationContext;

AdvplParser.prototype.wsServiceClientDeclaration = function() {

    var localctx = new WsServiceClientDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, AdvplParser.RULE_wsServiceClientDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this.match(AdvplParser.WSCLIENT);
        this.state = 304;
        this.identifier();
        this.state = 305;
        this.crlf();
        this.state = 310;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.WSMETHOD || _la===AdvplParser.WSDATA) {
            this.state = 308;
            switch(this._input.LA(1)) {
            case AdvplParser.WSDATA:
                this.state = 306;
                this.wsdataDefinition();
                break;
            case AdvplParser.WSMETHOD:
                this.state = 307;
                this.wsmethodClientDefinition();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 313;
        this.match(AdvplParser.ENDWSCLIENT);
        this.state = 314;
        this.crlf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsmethodClientDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsmethodClientDefinition;
    return this;
}

WsmethodClientDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsmethodClientDefinitionContext.prototype.constructor = WsmethodClientDefinitionContext;

WsmethodClientDefinitionContext.prototype.WSMETHOD = function() {
    return this.getToken(AdvplParser.WSMETHOD, 0);
};

WsmethodClientDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

WsmethodClientDefinitionContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

WsmethodClientDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsmethodClientDefinition(this);
	}
};

WsmethodClientDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsmethodClientDefinition(this);
	}
};




AdvplParser.WsmethodClientDefinitionContext = WsmethodClientDefinitionContext;

AdvplParser.prototype.wsmethodClientDefinition = function() {

    var localctx = new WsmethodClientDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, AdvplParser.RULE_wsmethodClientDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this.match(AdvplParser.WSMETHOD);
        this.state = 317;
        this.identifier();
        this.state = 318;
        this.crlf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsmethodClientBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_wsmethodClientBody;
    return this;
}

WsmethodClientBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsmethodClientBodyContext.prototype.constructor = WsmethodClientBodyContext;

WsmethodClientBodyContext.prototype.WSMETHOD = function() {
    return this.getToken(AdvplParser.WSMETHOD, 0);
};

WsmethodClientBodyContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

WsmethodClientBodyContext.prototype.WSCLIENT = function() {
    return this.getToken(AdvplParser.WSCLIENT, 0);
};

WsmethodClientBodyContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

WsmethodClientBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

WsmethodClientBodyContext.prototype.wsSend = function() {
    return this.getTypedRuleContext(WsSendContext,0);
};

WsmethodClientBodyContext.prototype.wsReceive = function() {
    return this.getTypedRuleContext(WsReceiveContext,0);
};

WsmethodClientBodyContext.prototype.initFuncOrMethod = function() {
    return this.getTypedRuleContext(InitFuncOrMethodContext,0);
};

WsmethodClientBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWsmethodClientBody(this);
	}
};

WsmethodClientBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWsmethodClientBody(this);
	}
};




AdvplParser.WsmethodClientBodyContext = WsmethodClientBodyContext;

AdvplParser.prototype.wsmethodClientBody = function() {

    var localctx = new WsmethodClientBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, AdvplParser.RULE_wsmethodClientBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 320;
        this.match(AdvplParser.WSMETHOD);
        this.state = 321;
        this.identifier();
        this.state = 323;
        _la = this._input.LA(1);
        if(_la===AdvplParser.WSSEND) {
            this.state = 322;
            this.wsSend();
        }

        this.state = 326;
        _la = this._input.LA(1);
        if(_la===AdvplParser.WSRECEIVE) {
            this.state = 325;
            this.wsReceive();
        }

        this.state = 328;
        this.match(AdvplParser.WSCLIENT);
        this.state = 329;
        this.identifier();
        this.state = 330;
        this.crlf();
        this.state = 332;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 331;
            this.initFuncOrMethod();

        }
        this.state = 334;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndWSMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_endWSMethod;
    return this;
}

EndWSMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndWSMethodContext.prototype.constructor = EndWSMethodContext;

EndWSMethodContext.prototype.END = function() {
    return this.getToken(AdvplParser.END, 0);
};

EndWSMethodContext.prototype.WSMETHOD = function() {
    return this.getToken(AdvplParser.WSMETHOD, 0);
};

EndWSMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterEndWSMethod(this);
	}
};

EndWSMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitEndWSMethod(this);
	}
};




AdvplParser.EndWSMethodContext = EndWSMethodContext;

AdvplParser.prototype.endWSMethod = function() {

    var localctx = new EndWSMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, AdvplParser.RULE_endWSMethod);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.match(AdvplParser.END);
        this.state = 337;
        this.match(AdvplParser.WSMETHOD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FuncDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_funcDeclaration;
    return this;
}

FuncDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncDeclarationContext.prototype.constructor = FuncDeclarationContext;

FuncDeclarationContext.prototype.FUNCTION = function() {
    return this.getToken(AdvplParser.FUNCTION, 0);
};

FuncDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FuncDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FuncDeclarationContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

FuncDeclarationContext.prototype.EOF = function() {
    return this.getToken(AdvplParser.EOF, 0);
};

FuncDeclarationContext.prototype.modifiersFunction = function() {
    return this.getTypedRuleContext(ModifiersFunctionContext,0);
};

FuncDeclarationContext.prototype.LPAREN = function() {
    return this.getToken(AdvplParser.LPAREN, 0);
};

FuncDeclarationContext.prototype.RPAREN = function() {
    return this.getToken(AdvplParser.RPAREN, 0);
};

FuncDeclarationContext.prototype.initFuncOrMethod = function() {
    return this.getTypedRuleContext(InitFuncOrMethodContext,0);
};

FuncDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FuncDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterFuncDeclaration(this);
	}
};

FuncDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitFuncDeclaration(this);
	}
};




AdvplParser.FuncDeclarationContext = FuncDeclarationContext;

AdvplParser.prototype.funcDeclaration = function() {

    var localctx = new FuncDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, AdvplParser.RULE_funcDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        _la = this._input.LA(1);
        if(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (AdvplParser.STATIC - 65)) | (1 << (AdvplParser.USER - 65)) | (1 << (AdvplParser.MAIN - 65)))) !== 0)) {
            this.state = 339;
            this.modifiersFunction();
        }

        this.state = 342;
        this.match(AdvplParser.FUNCTION);
        this.state = 343;
        this.identifier();
        this.state = 349;
        _la = this._input.LA(1);
        if(_la===AdvplParser.LPAREN) {
            this.state = 344;
            this.match(AdvplParser.LPAREN);
            this.state = 346;
            _la = this._input.LA(1);
            if(_la===AdvplParser.T__9 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (AdvplParser.TO - 38)) | (1 << (AdvplParser.NEXT - 38)) | (1 << (AdvplParser.END - 38)) | (1 << (AdvplParser.SELF - 38)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) !== 0)) {
                this.state = 345;
                this.formalParameters();
            }

            this.state = 348;
            this.match(AdvplParser.RPAREN);
        }

        this.state = 353;
        switch(this._input.LA(1)) {
        case AdvplParser.T__13:
        case AdvplParser.CRLF:
            this.state = 351;
            this.crlf();
            break;
        case AdvplParser.EOF:
            this.state = 352;
            this.match(AdvplParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 356;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 355;
            this.initFuncOrMethod();

        }
        this.state = 358;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitFormalParameters(this);
	}
};




AdvplParser.FormalParametersContext = FormalParametersContext;

AdvplParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, AdvplParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        this.formalParameter();
        this.state = 365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.COMMA) {
            this.state = 361;
            this.match(AdvplParser.COMMA);
            this.state = 362;
            this.formalParameter();
            this.state = 367;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitFormalParameter(this);
	}
};




AdvplParser.FormalParameterContext = FormalParameterContext;

AdvplParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, AdvplParser.RULE_formalParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitFuncOrMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_initFuncOrMethod;
    return this;
}

InitFuncOrMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitFuncOrMethodContext.prototype.constructor = InitFuncOrMethodContext;

InitFuncOrMethodContext.prototype.LOCAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.LOCAL);
    } else {
        return this.getToken(AdvplParser.LOCAL, i);
    }
};


InitFuncOrMethodContext.prototype.localVariableDeclarationStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LocalVariableDeclarationStatementContext);
    } else {
        return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,i);
    }
};

InitFuncOrMethodContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

InitFuncOrMethodContext.prototype.ifdef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IfdefContext);
    } else {
        return this.getTypedRuleContext(IfdefContext,i);
    }
};

InitFuncOrMethodContext.prototype.staticVariableBeforeLocal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StaticVariableBeforeLocalContext);
    } else {
        return this.getTypedRuleContext(StaticVariableBeforeLocalContext,i);
    }
};

InitFuncOrMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterInitFuncOrMethod(this);
	}
};

InitFuncOrMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitInitFuncOrMethod(this);
	}
};




AdvplParser.InitFuncOrMethodContext = InitFuncOrMethodContext;

AdvplParser.prototype.initFuncOrMethod = function() {

    var localctx = new InitFuncOrMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, AdvplParser.RULE_initFuncOrMethod);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 380; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 380;
        		switch(this._input.LA(1)) {
        		case AdvplParser.LOCAL:
        		    this.state = 370;
        		    this.match(AdvplParser.LOCAL);
        		    this.state = 371;
        		    this.localVariableDeclarationStatement();
        		    this.state = 372;
        		    this.crlf();
        		    break;
        		case AdvplParser.IFDEF:
        		case AdvplParser.IFNDEF:
        		case AdvplParser.ELSEDEF:
        		case AdvplParser.ENDIFDEF:
        		    this.state = 374;
        		    this.ifdef();
        		    this.state = 375;
        		    this.crlf();
        		    break;
        		case AdvplParser.STATIC:
        		    this.state = 377;
        		    this.staticVariableBeforeLocal();
        		    this.state = 378;
        		    this.crlf();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 382; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,34, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StaticVariableBeforeLocalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_staticVariableBeforeLocal;
    return this;
}

StaticVariableBeforeLocalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StaticVariableBeforeLocalContext.prototype.constructor = StaticVariableBeforeLocalContext;

StaticVariableBeforeLocalContext.prototype.staticVariable = function() {
    return this.getTypedRuleContext(StaticVariableContext,0);
};

StaticVariableBeforeLocalContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterStaticVariableBeforeLocal(this);
	}
};

StaticVariableBeforeLocalContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitStaticVariableBeforeLocal(this);
	}
};




AdvplParser.StaticVariableBeforeLocalContext = StaticVariableBeforeLocalContext;

AdvplParser.prototype.staticVariableBeforeLocal = function() {

    var localctx = new StaticVariableBeforeLocalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, AdvplParser.RULE_staticVariableBeforeLocal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 384;
        this.staticVariable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_localVariableDeclarationStatement;
    return this;
}

LocalVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationStatementContext.prototype.constructor = LocalVariableDeclarationStatementContext;

LocalVariableDeclarationStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LocalVariableDeclarationStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.COMMA);
    } else {
        return this.getToken(AdvplParser.COMMA, i);
    }
};


LocalVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitLocalVariableDeclarationStatement(this);
	}
};




AdvplParser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;

AdvplParser.prototype.localVariableDeclarationStatement = function() {

    var localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, AdvplParser.RULE_localVariableDeclarationStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 386;
        this.expression(0);
        this.state = 391;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.COMMA) {
            this.state = 387;
            this.match(AdvplParser.COMMA);
            this.state = 388;
            this.expression(0);
            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StaticVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_staticVariableDeclarationStatement;
    return this;
}

StaticVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StaticVariableDeclarationStatementContext.prototype.constructor = StaticVariableDeclarationStatementContext;

StaticVariableDeclarationStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

StaticVariableDeclarationStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.COMMA);
    } else {
        return this.getToken(AdvplParser.COMMA, i);
    }
};


StaticVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterStaticVariableDeclarationStatement(this);
	}
};

StaticVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitStaticVariableDeclarationStatement(this);
	}
};




AdvplParser.StaticVariableDeclarationStatementContext = StaticVariableDeclarationStatementContext;

AdvplParser.prototype.staticVariableDeclarationStatement = function() {

    var localctx = new StaticVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, AdvplParser.RULE_staticVariableDeclarationStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this.expression(0);
        this.state = 399;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.COMMA) {
            this.state = 395;
            this.match(AdvplParser.COMMA);
            this.state = 396;
            this.expression(0);
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PublicVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_publicVariableDeclarationStatement;
    return this;
}

PublicVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PublicVariableDeclarationStatementContext.prototype.constructor = PublicVariableDeclarationStatementContext;

PublicVariableDeclarationStatementContext.prototype.PUBLIC = function() {
    return this.getToken(AdvplParser.PUBLIC, 0);
};

PublicVariableDeclarationStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PublicVariableDeclarationStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.COMMA);
    } else {
        return this.getToken(AdvplParser.COMMA, i);
    }
};


PublicVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterPublicVariableDeclarationStatement(this);
	}
};

PublicVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitPublicVariableDeclarationStatement(this);
	}
};




AdvplParser.PublicVariableDeclarationStatementContext = PublicVariableDeclarationStatementContext;

AdvplParser.prototype.publicVariableDeclarationStatement = function() {

    var localctx = new PublicVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, AdvplParser.RULE_publicVariableDeclarationStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402;
        this.match(AdvplParser.PUBLIC);
        this.state = 403;
        this.expression(0);
        this.state = 408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.COMMA) {
            this.state = 404;
            this.match(AdvplParser.COMMA);
            this.state = 405;
            this.expression(0);
            this.state = 410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrivateVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_privateVariableDeclarationStatement;
    return this;
}

PrivateVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivateVariableDeclarationStatementContext.prototype.constructor = PrivateVariableDeclarationStatementContext;

PrivateVariableDeclarationStatementContext.prototype.PRIVATE = function() {
    return this.getToken(AdvplParser.PRIVATE, 0);
};

PrivateVariableDeclarationStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PrivateVariableDeclarationStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.COMMA);
    } else {
        return this.getToken(AdvplParser.COMMA, i);
    }
};


PrivateVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterPrivateVariableDeclarationStatement(this);
	}
};

PrivateVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitPrivateVariableDeclarationStatement(this);
	}
};




AdvplParser.PrivateVariableDeclarationStatementContext = PrivateVariableDeclarationStatementContext;

AdvplParser.prototype.privateVariableDeclarationStatement = function() {

    var localctx = new PrivateVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, AdvplParser.RULE_privateVariableDeclarationStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.match(AdvplParser.PRIVATE);
        this.state = 412;
        this.expression(0);
        this.state = 417;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.COMMA) {
            this.state = 413;
            this.match(AdvplParser.COMMA);
            this.state = 414;
            this.expression(0);
            this.state = 419;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_defaultStatement;
    return this;
}

DefaultStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultStatementContext.prototype.constructor = DefaultStatementContext;

DefaultStatementContext.prototype.DEFAULT = function() {
    return this.getToken(AdvplParser.DEFAULT, 0);
};

DefaultStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DefaultStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterDefaultStatement(this);
	}
};

DefaultStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitDefaultStatement(this);
	}
};




AdvplParser.DefaultStatementContext = DefaultStatementContext;

AdvplParser.prototype.defaultStatement = function() {

    var localctx = new DefaultStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, AdvplParser.RULE_defaultStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 420;
        this.match(AdvplParser.DEFAULT);
        this.state = 421;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayOrBlockInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_arrayOrBlockInitializer;
    return this;
}

ArrayOrBlockInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayOrBlockInitializerContext.prototype.constructor = ArrayOrBlockInitializerContext;


 
ArrayOrBlockInitializerContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BlockInitializerContext(parser, ctx) {
	ArrayOrBlockInitializerContext.call(this, parser);
    ArrayOrBlockInitializerContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BlockInitializerContext.prototype = Object.create(ArrayOrBlockInitializerContext.prototype);
BlockInitializerContext.prototype.constructor = BlockInitializerContext;

AdvplParser.BlockInitializerContext = BlockInitializerContext;

BlockInitializerContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

BlockInitializerContext.prototype.blockParams = function() {
    return this.getTypedRuleContext(BlockParamsContext,0);
};
BlockInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterBlockInitializer(this);
	}
};

BlockInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitBlockInitializer(this);
	}
};


function ArrayInitializerContext(parser, ctx) {
	ArrayOrBlockInitializerContext.call(this, parser);
    ArrayOrBlockInitializerContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayInitializerContext.prototype = Object.create(ArrayOrBlockInitializerContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

AdvplParser.ArrayInitializerContext = ArrayInitializerContext;

ArrayInitializerContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitArrayInitializer(this);
	}
};



AdvplParser.ArrayOrBlockInitializerContext = ArrayOrBlockInitializerContext;

AdvplParser.prototype.arrayOrBlockInitializer = function() {

    var localctx = new ArrayOrBlockInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, AdvplParser.RULE_arrayOrBlockInitializer);
    var _la = 0; // Token type
    try {
        this.state = 436;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ArrayInitializerContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 423;
            this.match(AdvplParser.T__1);
            this.state = 424;
            this.expressionList();
            this.state = 425;
            this.match(AdvplParser.T__2);
            break;

        case 2:
            localctx = new BlockInitializerContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 427;
            this.match(AdvplParser.T__1);
            this.state = 428;
            this.match(AdvplParser.T__3);
            this.state = 430;
            _la = this._input.LA(1);
            if(_la===AdvplParser.T__9 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (AdvplParser.TO - 38)) | (1 << (AdvplParser.NEXT - 38)) | (1 << (AdvplParser.END - 38)) | (1 << (AdvplParser.SELF - 38)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) !== 0)) {
                this.state = 429;
                this.blockParams();
            }

            this.state = 432;
            this.match(AdvplParser.T__3);
            this.state = 433;
            this.expressionList();
            this.state = 434;
            this.match(AdvplParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockParamsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_blockParams;
    return this;
}

BlockParamsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockParamsContext.prototype.constructor = BlockParamsContext;

BlockParamsContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

BlockParamsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.COMMA);
    } else {
        return this.getToken(AdvplParser.COMMA, i);
    }
};


BlockParamsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterBlockParams(this);
	}
};

BlockParamsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitBlockParams(this);
	}
};




AdvplParser.BlockParamsContext = BlockParamsContext;

AdvplParser.prototype.blockParams = function() {

    var localctx = new BlockParamsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, AdvplParser.RULE_blockParams);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 438;
        this.identifier();
        this.state = 443;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.COMMA) {
            this.state = 439;
            this.match(AdvplParser.COMMA);
            this.state = 440;
            this.identifier();
            this.state = 445;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

BlockContext.prototype.EOF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.EOF);
    } else {
        return this.getToken(AdvplParser.EOF, i);
    }
};


BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitBlock(this);
	}
};




AdvplParser.BlockContext = BlockContext;

AdvplParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, AdvplParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 452; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 452;
        		switch(this._input.LA(1)) {
        		case AdvplParser.T__1:
        		case AdvplParser.T__4:
        		case AdvplParser.T__9:
        		case AdvplParser.PLUSPLUS:
        		case AdvplParser.MINUSMINUS:
        		case AdvplParser.PLUS:
        		case AdvplParser.MINUS:
        		case AdvplParser.ARROBA:
        		case AdvplParser.ECOMERCIAL:
        		case AdvplParser.TO:
        		case AdvplParser.TRUE:
        		case AdvplParser.FALSE:
        		case AdvplParser.NIL:
        		case AdvplParser.IFDEF:
        		case AdvplParser.IFNDEF:
        		case AdvplParser.ELSEDEF:
        		case AdvplParser.ENDIFDEF:
        		case AdvplParser.FOR:
        		case AdvplParser.NEXT:
        		case AdvplParser.WHILE:
        		case AdvplParser.DO:
        		case AdvplParser.IF:
        		case AdvplParser.END:
        		case AdvplParser.CASE:
        		case AdvplParser.EXIT:
        		case AdvplParser.LOOP:
        		case AdvplParser.PRIVATE:
        		case AdvplParser.PUBLIC:
        		case AdvplParser.STATIC:
        		case AdvplParser.SELF:
        		case AdvplParser.DEFAULT:
        		case AdvplParser.RETURN:
        		case AdvplParser.ASSUME:
        		case AdvplParser.CLASS:
        		case AdvplParser.DATA:
        		case AdvplParser.FROM:
        		case AdvplParser.WSMETHOD:
        		case AdvplParser.DESCRIPTION:
        		case AdvplParser.AS:
        		case AdvplParser.OF:
        		case AdvplParser.LPAREN:
        		case AdvplParser.NUMBER:
        		case AdvplParser.IDENTIFIER:
        		case AdvplParser.STRING:
        		case AdvplParser.STRINGSIMPLE:
        		    this.state = 446;
        		    this.statement();
        		    this.state = 449;
        		    switch(this._input.LA(1)) {
        		    case AdvplParser.T__13:
        		    case AdvplParser.CRLF:
        		        this.state = 447;
        		        this.crlf();
        		        break;
        		    case AdvplParser.EOF:
        		        this.state = 448;
        		        this.match(AdvplParser.EOF);
        		        break;
        		    default:
        		        throw new antlr4.error.NoViableAltException(this);
        		    }
        		    break;
        		case AdvplParser.T__13:
        		case AdvplParser.CRLF:
        		    this.state = 451;
        		    this.crlf();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 454; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,44, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.statementExpression = function() {
    return this.getTypedRuleContext(StatementExpressionContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

StatementContext.prototype.doStatement = function() {
    return this.getTypedRuleContext(DoStatementContext,0);
};

StatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

StatementContext.prototype.docaseStatement = function() {
    return this.getTypedRuleContext(DocaseStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.privateVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(PrivateVariableDeclarationStatementContext,0);
};

StatementContext.prototype.exitOrLoopStatement = function() {
    return this.getTypedRuleContext(ExitOrLoopStatementContext,0);
};

StatementContext.prototype.defaultStatement = function() {
    return this.getTypedRuleContext(DefaultStatementContext,0);
};

StatementContext.prototype.publicVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(PublicVariableDeclarationStatementContext,0);
};

StatementContext.prototype.staticVariable = function() {
    return this.getTypedRuleContext(StaticVariableContext,0);
};

StatementContext.prototype.ifdef = function() {
    return this.getTypedRuleContext(IfdefContext,0);
};

StatementContext.prototype.chStatement = function() {
    return this.getTypedRuleContext(ChStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitStatement(this);
	}
};




AdvplParser.StatementContext = StatementContext;

AdvplParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, AdvplParser.RULE_statement);
    try {
        this.state = 470;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 456;
            this.statementExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 457;
            this.ifStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 458;
            this.forStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 459;
            this.doStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 460;
            this.whileStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 461;
            this.docaseStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 462;
            this.returnStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 463;
            this.privateVariableDeclarationStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 464;
            this.exitOrLoopStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 465;
            this.defaultStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 466;
            this.publicVariableDeclarationStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 467;
            this.staticVariable();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 468;
            this.ifdef();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 469;
            this.chStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(AdvplParser.RETURN, 0);
};

ReturnStatementContext.prototype.returnvalues = function() {
    return this.getTypedRuleContext(ReturnvaluesContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitReturnStatement(this);
	}
};




AdvplParser.ReturnStatementContext = ReturnStatementContext;

AdvplParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, AdvplParser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 472;
        this.match(AdvplParser.RETURN);
        this.state = 474;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AdvplParser.T__1) | (1 << AdvplParser.T__4) | (1 << AdvplParser.T__9) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (AdvplParser.ARROBA - 33)) | (1 << (AdvplParser.ECOMERCIAL - 33)) | (1 << (AdvplParser.TO - 33)) | (1 << (AdvplParser.TRUE - 33)) | (1 << (AdvplParser.FALSE - 33)) | (1 << (AdvplParser.NIL - 33)) | (1 << (AdvplParser.NEXT - 33)) | (1 << (AdvplParser.IF - 33)) | (1 << (AdvplParser.END - 33)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (AdvplParser.SELF - 69)) | (1 << (AdvplParser.ASSUME - 69)) | (1 << (AdvplParser.DATA - 69)) | (1 << (AdvplParser.WSMETHOD - 69)) | (1 << (AdvplParser.DESCRIPTION - 69)) | (1 << (AdvplParser.AS - 69)) | (1 << (AdvplParser.OF - 69)) | (1 << (AdvplParser.LPAREN - 69)) | (1 << (AdvplParser.NUMBER - 69)) | (1 << (AdvplParser.IDENTIFIER - 69)))) !== 0) || _la===AdvplParser.STRING || _la===AdvplParser.STRINGSIMPLE) {
            this.state = 473;
            this.returnvalues();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnvaluesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_returnvalues;
    return this;
}

ReturnvaluesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnvaluesContext.prototype.constructor = ReturnvaluesContext;

ReturnvaluesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnvaluesContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterReturnvalues(this);
	}
};

ReturnvaluesContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitReturnvalues(this);
	}
};




AdvplParser.ReturnvaluesContext = ReturnvaluesContext;

AdvplParser.prototype.returnvalues = function() {

    var localctx = new ReturnvaluesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, AdvplParser.RULE_returnvalues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 476;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_statementExpression;
    return this;
}

StatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementExpressionContext.prototype.constructor = StatementExpressionContext;

StatementExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterStatementExpression(this);
	}
};

StatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitStatementExpression(this);
	}
};




AdvplParser.StatementExpressionContext = StatementExpressionContext;

AdvplParser.prototype.statementExpression = function() {

    var localctx = new StatementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, AdvplParser.RULE_statementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 478;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ExprPrimaryContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprPrimaryContext.prototype = Object.create(ExpressionContext.prototype);
ExprPrimaryContext.prototype.constructor = ExprPrimaryContext;

AdvplParser.ExprPrimaryContext = ExprPrimaryContext;

ExprPrimaryContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};
ExprPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExprPrimary(this);
	}
};

ExprPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExprPrimary(this);
	}
};


function AssignmentContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentContext.prototype = Object.create(ExpressionContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AdvplParser.AssignmentContext = AssignmentContext;

AssignmentContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssignmentContext.prototype.PLUSEQUALS = function() {
    return this.getToken(AdvplParser.PLUSEQUALS, 0);
};
AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitAssignment(this);
	}
};


function ExprIncrPosContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprIncrPosContext.prototype = Object.create(ExpressionContext.prototype);
ExprIncrPosContext.prototype.constructor = ExprIncrPosContext;

AdvplParser.ExprIncrPosContext = ExprIncrPosContext;

ExprIncrPosContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExprIncrPosContext.prototype.PLUSPLUS = function() {
    return this.getToken(AdvplParser.PLUSPLUS, 0);
};

ExprIncrPosContext.prototype.MINUSMINUS = function() {
    return this.getToken(AdvplParser.MINUSMINUS, 0);
};
ExprIncrPosContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExprIncrPos(this);
	}
};

ExprIncrPosContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExprIncrPos(this);
	}
};


function ExprIncrPreContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprIncrPreContext.prototype = Object.create(ExpressionContext.prototype);
ExprIncrPreContext.prototype.constructor = ExprIncrPreContext;

AdvplParser.ExprIncrPreContext = ExprIncrPreContext;

ExprIncrPreContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExprIncrPreContext.prototype.PLUS = function() {
    return this.getToken(AdvplParser.PLUS, 0);
};

ExprIncrPreContext.prototype.MINUS = function() {
    return this.getToken(AdvplParser.MINUS, 0);
};

ExprIncrPreContext.prototype.PLUSPLUS = function() {
    return this.getToken(AdvplParser.PLUSPLUS, 0);
};

ExprIncrPreContext.prototype.MINUSMINUS = function() {
    return this.getToken(AdvplParser.MINUSMINUS, 0);
};
ExprIncrPreContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExprIncrPre(this);
	}
};

ExprIncrPreContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExprIncrPre(this);
	}
};


function ExprLogicalContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprLogicalContext.prototype = Object.create(ExpressionContext.prototype);
ExprLogicalContext.prototype.constructor = ExprLogicalContext;

AdvplParser.ExprLogicalContext = ExprLogicalContext;

ExprLogicalContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExprLogicalContext.prototype.AND = function() {
    return this.getToken(AdvplParser.AND, 0);
};

ExprLogicalContext.prototype.OR = function() {
    return this.getToken(AdvplParser.OR, 0);
};
ExprLogicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExprLogical(this);
	}
};

ExprLogicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExprLogical(this);
	}
};


function AliasAssignmentContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AliasAssignmentContext.prototype = Object.create(ExpressionContext.prototype);
AliasAssignmentContext.prototype.constructor = AliasAssignmentContext;

AdvplParser.AliasAssignmentContext = AliasAssignmentContext;

AliasAssignmentContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AliasAssignmentContext.prototype.ALIASACCESS = function() {
    return this.getToken(AdvplParser.ALIASACCESS, 0);
};
AliasAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterAliasAssignment(this);
	}
};

AliasAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitAliasAssignment(this);
	}
};


function ExprCompContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprCompContext.prototype = Object.create(ExpressionContext.prototype);
ExprCompContext.prototype.constructor = ExprCompContext;

AdvplParser.ExprCompContext = ExprCompContext;

ExprCompContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExprCompContext.prototype.MINOREQUALS = function() {
    return this.getToken(AdvplParser.MINOREQUALS, 0);
};

ExprCompContext.prototype.MAJOREQUALS = function() {
    return this.getToken(AdvplParser.MAJOREQUALS, 0);
};

ExprCompContext.prototype.MINOR = function() {
    return this.getToken(AdvplParser.MINOR, 0);
};

ExprCompContext.prototype.MAJOR = function() {
    return this.getToken(AdvplParser.MAJOR, 0);
};

ExprCompContext.prototype.EQUALS = function() {
    return this.getToken(AdvplParser.EQUALS, 0);
};

ExprCompContext.prototype.DOUBLEEQUAL = function() {
    return this.getToken(AdvplParser.DOUBLEEQUAL, 0);
};

ExprCompContext.prototype.DIF1 = function() {
    return this.getToken(AdvplParser.DIF1, 0);
};

ExprCompContext.prototype.DIF2 = function() {
    return this.getToken(AdvplParser.DIF2, 0);
};

ExprCompContext.prototype.DIF3 = function() {
    return this.getToken(AdvplParser.DIF3, 0);
};

ExprCompContext.prototype.CONTIDO = function() {
    return this.getToken(AdvplParser.CONTIDO, 0);
};
ExprCompContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExprComp(this);
	}
};

ExprCompContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExprComp(this);
	}
};


function ExprPlusContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprPlusContext.prototype = Object.create(ExpressionContext.prototype);
ExprPlusContext.prototype.constructor = ExprPlusContext;

AdvplParser.ExprPlusContext = ExprPlusContext;

ExprPlusContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExprPlusContext.prototype.PLUS = function() {
    return this.getToken(AdvplParser.PLUS, 0);
};

ExprPlusContext.prototype.MINUS = function() {
    return this.getToken(AdvplParser.MINUS, 0);
};
ExprPlusContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExprPlus(this);
	}
};

ExprPlusContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExprPlus(this);
	}
};


function ExprNotContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprNotContext.prototype = Object.create(ExpressionContext.prototype);
ExprNotContext.prototype.constructor = ExprNotContext;

AdvplParser.ExprNotContext = ExprNotContext;

ExprNotContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ExprNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExprNot(this);
	}
};

ExprNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExprNot(this);
	}
};


function ExprMulContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprMulContext.prototype = Object.create(ExpressionContext.prototype);
ExprMulContext.prototype.constructor = ExprMulContext;

AdvplParser.ExprMulContext = ExprMulContext;

ExprMulContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExprMulContext.prototype.MULT = function() {
    return this.getToken(AdvplParser.MULT, 0);
};

ExprMulContext.prototype.DIV = function() {
    return this.getToken(AdvplParser.DIV, 0);
};

ExprMulContext.prototype.PERC = function() {
    return this.getToken(AdvplParser.PERC, 0);
};
ExprMulContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExprMul(this);
	}
};

ExprMulContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExprMul(this);
	}
};



AdvplParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, AdvplParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        switch(this._input.LA(1)) {
        case AdvplParser.PLUSPLUS:
        case AdvplParser.MINUSMINUS:
        case AdvplParser.PLUS:
        case AdvplParser.MINUS:
            localctx = new ExprIncrPreContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 485;
            switch(this._input.LA(1)) {
            case AdvplParser.PLUS:
                this.state = 481;
                localctx.op = this.match(AdvplParser.PLUS);
                break;
            case AdvplParser.MINUS:
                this.state = 482;
                localctx.op = this.match(AdvplParser.MINUS);
                break;
            case AdvplParser.PLUSPLUS:
                this.state = 483;
                localctx.op = this.match(AdvplParser.PLUSPLUS);
                break;
            case AdvplParser.MINUSMINUS:
                this.state = 484;
                localctx.op = this.match(AdvplParser.MINUSMINUS);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 487;
            this.expression(9);
            break;
        case AdvplParser.T__4:
            localctx = new ExprNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 488;
            this.match(AdvplParser.T__4);
            this.state = 489;
            this.expression(8);
            break;
        case AdvplParser.T__1:
        case AdvplParser.T__9:
        case AdvplParser.ARROBA:
        case AdvplParser.ECOMERCIAL:
        case AdvplParser.TO:
        case AdvplParser.TRUE:
        case AdvplParser.FALSE:
        case AdvplParser.NIL:
        case AdvplParser.NEXT:
        case AdvplParser.IF:
        case AdvplParser.END:
        case AdvplParser.SELF:
        case AdvplParser.ASSUME:
        case AdvplParser.DATA:
        case AdvplParser.WSMETHOD:
        case AdvplParser.DESCRIPTION:
        case AdvplParser.AS:
        case AdvplParser.OF:
        case AdvplParser.LPAREN:
        case AdvplParser.NUMBER:
        case AdvplParser.IDENTIFIER:
        case AdvplParser.STRING:
        case AdvplParser.STRINGSIMPLE:
            localctx = new ExprPrimaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 490;
            this.primary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 539;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 537;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExprMulContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AdvplParser.RULE_expression);
                    this.state = 493;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 497;
                    switch(this._input.LA(1)) {
                    case AdvplParser.MULT:
                        this.state = 494;
                        localctx.op = this.match(AdvplParser.MULT);
                        break;
                    case AdvplParser.DIV:
                        this.state = 495;
                        localctx.op = this.match(AdvplParser.DIV);
                        break;
                    case AdvplParser.PERC:
                        this.state = 496;
                        localctx.op = this.match(AdvplParser.PERC);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 499;
                    this.expression(8);
                    break;

                case 2:
                    localctx = new ExprPlusContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AdvplParser.RULE_expression);
                    this.state = 500;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 503;
                    switch(this._input.LA(1)) {
                    case AdvplParser.PLUS:
                        this.state = 501;
                        localctx.op = this.match(AdvplParser.PLUS);
                        break;
                    case AdvplParser.MINUS:
                        this.state = 502;
                        localctx.op = this.match(AdvplParser.MINUS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 505;
                    this.expression(7);
                    break;

                case 3:
                    localctx = new ExprLogicalContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AdvplParser.RULE_expression);
                    this.state = 506;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 507;
                    localctx.op = this.match(AdvplParser.AND);
                    this.state = 508;
                    this.expression(6);
                    break;

                case 4:
                    localctx = new ExprLogicalContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AdvplParser.RULE_expression);
                    this.state = 509;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 510;
                    localctx.op = this.match(AdvplParser.OR);
                    this.state = 511;
                    this.expression(5);
                    break;

                case 5:
                    localctx = new ExprCompContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AdvplParser.RULE_expression);
                    this.state = 512;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 523;
                    switch(this._input.LA(1)) {
                    case AdvplParser.MINOREQUALS:
                        this.state = 513;
                        localctx.op = this.match(AdvplParser.MINOREQUALS);
                        break;
                    case AdvplParser.MAJOREQUALS:
                        this.state = 514;
                        localctx.op = this.match(AdvplParser.MAJOREQUALS);
                        break;
                    case AdvplParser.MINOR:
                        this.state = 515;
                        localctx.op = this.match(AdvplParser.MINOR);
                        break;
                    case AdvplParser.MAJOR:
                        this.state = 516;
                        localctx.op = this.match(AdvplParser.MAJOR);
                        break;
                    case AdvplParser.EQUALS:
                        this.state = 517;
                        localctx.op = this.match(AdvplParser.EQUALS);
                        break;
                    case AdvplParser.DOUBLEEQUAL:
                        this.state = 518;
                        localctx.op = this.match(AdvplParser.DOUBLEEQUAL);
                        break;
                    case AdvplParser.DIF1:
                        this.state = 519;
                        localctx.op = this.match(AdvplParser.DIF1);
                        break;
                    case AdvplParser.DIF2:
                        this.state = 520;
                        localctx.op = this.match(AdvplParser.DIF2);
                        break;
                    case AdvplParser.DIF3:
                        this.state = 521;
                        localctx.op = this.match(AdvplParser.DIF3);
                        break;
                    case AdvplParser.CONTIDO:
                        this.state = 522;
                        localctx.op = this.match(AdvplParser.CONTIDO);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 525;
                    this.expression(4);
                    break;

                case 6:
                    localctx = new AliasAssignmentContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AdvplParser.RULE_expression);
                    this.state = 526;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 527;
                    this.match(AdvplParser.ALIASACCESS);
                    this.state = 528;
                    this.expression(3);
                    break;

                case 7:
                    localctx = new AssignmentContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AdvplParser.RULE_expression);
                    this.state = 529;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 530;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AdvplParser.T__5) | (1 << AdvplParser.T__6) | (1 << AdvplParser.T__7) | (1 << AdvplParser.T__8) | (1 << AdvplParser.PLUSEQUALS))) !== 0) || _la===AdvplParser.ATTRIB_OPERATOR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 531;
                    this.expression(2);
                    break;

                case 8:
                    localctx = new ExprIncrPosContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, AdvplParser.RULE_expression);
                    this.state = 532;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 535;
                    switch(this._input.LA(1)) {
                    case AdvplParser.PLUSPLUS:
                        this.state = 533;
                        localctx.op = this.match(AdvplParser.PLUSPLUS);
                        break;
                    case AdvplParser.MINUSMINUS:
                        this.state = 534;
                        localctx.op = this.match(AdvplParser.MINUSMINUS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                } 
            }
            this.state = 541;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;


 
PrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ObjectAttribAccessContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ObjectAttribAccessContext.prototype = Object.create(PrimaryContext.prototype);
ObjectAttribAccessContext.prototype.constructor = ObjectAttribAccessContext;

AdvplParser.ObjectAttribAccessContext = ObjectAttribAccessContext;

ObjectAttribAccessContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ObjectAttribAccessContext.prototype.ARROBA = function() {
    return this.getToken(AdvplParser.ARROBA, 0);
};

ObjectAttribAccessContext.prototype.arrayAccess = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayAccessContext);
    } else {
        return this.getTypedRuleContext(ArrayAccessContext,i);
    }
};
ObjectAttribAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterObjectAttribAccess(this);
	}
};

ObjectAttribAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitObjectAttribAccess(this);
	}
};


function CallContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CallContext.prototype = Object.create(PrimaryContext.prototype);
CallContext.prototype.constructor = CallContext;

AdvplParser.CallContext = CallContext;

CallContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CallContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

CallContext.prototype.arrayAccess = function() {
    return this.getTypedRuleContext(ArrayAccessContext,0);
};
CallContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterCall(this);
	}
};

CallContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitCall(this);
	}
};


function VarArrayAccessContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VarArrayAccessContext.prototype = Object.create(PrimaryContext.prototype);
VarArrayAccessContext.prototype.constructor = VarArrayAccessContext;

AdvplParser.VarArrayAccessContext = VarArrayAccessContext;

VarArrayAccessContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

VarArrayAccessContext.prototype.arrayAccess = function() {
    return this.getTypedRuleContext(ArrayAccessContext,0);
};

VarArrayAccessContext.prototype.ARROBA = function() {
    return this.getToken(AdvplParser.ARROBA, 0);
};
VarArrayAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterVarArrayAccess(this);
	}
};

VarArrayAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitVarArrayAccess(this);
	}
};


function ParensContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParensContext.prototype = Object.create(PrimaryContext.prototype);
ParensContext.prototype.constructor = ParensContext;

AdvplParser.ParensContext = ParensContext;

ParensContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
ParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterParens(this);
	}
};

ParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitParens(this);
	}
};


function ObjectMethodAccessContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ObjectMethodAccessContext.prototype = Object.create(PrimaryContext.prototype);
ObjectMethodAccessContext.prototype.constructor = ObjectMethodAccessContext;

AdvplParser.ObjectMethodAccessContext = ObjectMethodAccessContext;

ObjectMethodAccessContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ObjectMethodAccessContext.prototype.arrayAccess = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayAccessContext);
    } else {
        return this.getTypedRuleContext(ArrayAccessContext,i);
    }
};

ObjectMethodAccessContext.prototype.methodAccessLoop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodAccessLoopContext);
    } else {
        return this.getTypedRuleContext(MethodAccessLoopContext,i);
    }
};
ObjectMethodAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterObjectMethodAccess(this);
	}
};

ObjectMethodAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitObjectMethodAccess(this);
	}
};


function VarContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VarContext.prototype = Object.create(PrimaryContext.prototype);
VarContext.prototype.constructor = VarContext;

AdvplParser.VarContext = VarContext;

VarContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

VarContext.prototype.ARROBA = function() {
    return this.getToken(AdvplParser.ARROBA, 0);
};
VarContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterVar(this);
	}
};

VarContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitVar(this);
	}
};


function ClassConstructorContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClassConstructorContext.prototype = Object.create(PrimaryContext.prototype);
ClassConstructorContext.prototype.constructor = ClassConstructorContext;

AdvplParser.ClassConstructorContext = ClassConstructorContext;

ClassConstructorContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ClassConstructorContext.prototype.LPAREN = function() {
    return this.getToken(AdvplParser.LPAREN, 0);
};

ClassConstructorContext.prototype.RPAREN = function() {
    return this.getToken(AdvplParser.RPAREN, 0);
};

ClassConstructorContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
ClassConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterClassConstructor(this);
	}
};

ClassConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitClassConstructor(this);
	}
};


function MacroExecucaoContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MacroExecucaoContext.prototype = Object.create(PrimaryContext.prototype);
MacroExecucaoContext.prototype.constructor = MacroExecucaoContext;

AdvplParser.MacroExecucaoContext = MacroExecucaoContext;

MacroExecucaoContext.prototype.ECOMERCIAL = function() {
    return this.getToken(AdvplParser.ECOMERCIAL, 0);
};

MacroExecucaoContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MacroExecucaoContext.prototype.methodAccessLoop = function() {
    return this.getTypedRuleContext(MethodAccessLoopContext,0);
};
MacroExecucaoContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterMacroExecucao(this);
	}
};

MacroExecucaoContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitMacroExecucao(this);
	}
};


function IfCallContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfCallContext.prototype = Object.create(PrimaryContext.prototype);
IfCallContext.prototype.constructor = IfCallContext;

AdvplParser.IfCallContext = IfCallContext;

IfCallContext.prototype.ifFunctioncall = function() {
    return this.getTypedRuleContext(IfFunctioncallContext,0);
};
IfCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterIfCall(this);
	}
};

IfCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitIfCall(this);
	}
};


function LitContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LitContext.prototype = Object.create(PrimaryContext.prototype);
LitContext.prototype.constructor = LitContext;

AdvplParser.LitContext = LitContext;

LitContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LitContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterLit(this);
	}
};

LitContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitLit(this);
	}
};


function CallWithAttContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CallWithAttContext.prototype = Object.create(PrimaryContext.prototype);
CallWithAttContext.prototype.constructor = CallWithAttContext;

AdvplParser.CallWithAttContext = CallWithAttContext;

CallWithAttContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

CallWithAttContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
CallWithAttContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterCallWithAtt(this);
	}
};

CallWithAttContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitCallWithAtt(this);
	}
};


function AssumeContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssumeContext.prototype = Object.create(PrimaryContext.prototype);
AssumeContext.prototype.constructor = AssumeContext;

AdvplParser.AssumeContext = AssumeContext;

AssumeContext.prototype.ARROBA = function() {
    return this.getToken(AdvplParser.ARROBA, 0);
};

AssumeContext.prototype.ASSUME = function() {
    return this.getToken(AdvplParser.ASSUME, 0);
};

AssumeContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

AssumeContext.prototype.AS = function() {
    return this.getToken(AdvplParser.AS, 0);
};
AssumeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterAssume(this);
	}
};

AssumeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitAssume(this);
	}
};


function ArrayOrBlockContext(parser, ctx) {
	PrimaryContext.call(this, parser);
    PrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayOrBlockContext.prototype = Object.create(PrimaryContext.prototype);
ArrayOrBlockContext.prototype.constructor = ArrayOrBlockContext;

AdvplParser.ArrayOrBlockContext = ArrayOrBlockContext;

ArrayOrBlockContext.prototype.arrayOrBlockInitializer = function() {
    return this.getTypedRuleContext(ArrayOrBlockInitializerContext,0);
};
ArrayOrBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterArrayOrBlock(this);
	}
};

ArrayOrBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitArrayOrBlock(this);
	}
};



AdvplParser.PrimaryContext = PrimaryContext;

AdvplParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, AdvplParser.RULE_primary);
    var _la = 0; // Token type
    try {
        this.state = 626;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ParensContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 542;
            this.match(AdvplParser.LPAREN);
            this.state = 543;
            this.expressionList();
            this.state = 544;
            this.match(AdvplParser.RPAREN);
            break;

        case 2:
            localctx = new VarArrayAccessContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 547;
            _la = this._input.LA(1);
            if(_la===AdvplParser.ARROBA) {
                this.state = 546;
                this.match(AdvplParser.ARROBA);
            }

            this.state = 549;
            this.identifier();
            this.state = 550;
            this.arrayAccess();
            break;

        case 3:
            localctx = new CallContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 552;
            this.identifier();
            this.state = 553;
            this.arguments();

            this.state = 555;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
            if(la_===1) {
                this.state = 554;
                this.arrayAccess();

            }
            break;

        case 4:
            localctx = new CallWithAttContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 557;
            this.identifier();
            this.state = 558;
            this.arguments();
            this.state = 559;
            this.match(AdvplParser.T__9);
            this.state = 560;
            this.identifier();
            break;

        case 5:
            localctx = new ObjectAttribAccessContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 563;
            _la = this._input.LA(1);
            if(_la===AdvplParser.ARROBA) {
                this.state = 562;
                this.match(AdvplParser.ARROBA);
            }

            this.state = 565;
            this.identifier();
            this.state = 567;
            _la = this._input.LA(1);
            if(_la===AdvplParser.LBRACK) {
                this.state = 566;
                this.arrayAccess();
            }

            this.state = 574; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 569;
            		this.match(AdvplParser.T__9);
            		this.state = 570;
            		this.identifier();
            		this.state = 572;
            		this._errHandler.sync(this);
            		var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
            		if(la_===1) {
            		    this.state = 571;
            		    this.arrayAccess();

            		}
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 576; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,60, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 6:
            localctx = new ObjectMethodAccessContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 578;
            this.identifier();
            this.state = 582;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AdvplParser.LBRACK) {
                this.state = 579;
                this.arrayAccess();
                this.state = 584;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 586; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 585;
            		this.methodAccessLoop();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 588; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,62, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 7:
            localctx = new ClassConstructorContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 590;
            this.identifier();
            this.state = 591;
            this.match(AdvplParser.LPAREN);
            this.state = 592;
            this.match(AdvplParser.RPAREN);
            this.state = 593;
            this.match(AdvplParser.T__9);
            this.state = 594;
            this.identifier();
            this.state = 595;
            this.arguments();
            break;

        case 8:
            localctx = new VarContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 598;
            _la = this._input.LA(1);
            if(_la===AdvplParser.ARROBA) {
                this.state = 597;
                this.match(AdvplParser.ARROBA);
            }

            this.state = 600;
            this.identifier();
            break;

        case 9:
            localctx = new AssumeContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 601;
            this.match(AdvplParser.ARROBA);
            this.state = 602;
            this.match(AdvplParser.ASSUME);
            this.state = 603;
            this.identifier();
            this.state = 608;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AdvplParser.T__9) {
                this.state = 604;
                this.match(AdvplParser.T__9);
                this.state = 605;
                this.identifier();
                this.state = 610;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 611;
            this.match(AdvplParser.AS);
            this.state = 612;
            this.identifier();
            break;

        case 10:
            localctx = new LitContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 614;
            this.literal();
            break;

        case 11:
            localctx = new ArrayOrBlockContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 615;
            this.arrayOrBlockInitializer();
            break;

        case 12:
            localctx = new IfCallContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 616;
            this.ifFunctioncall();
            break;

        case 13:
            localctx = new MacroExecucaoContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 617;
            this.match(AdvplParser.ECOMERCIAL);
            this.state = 618;
            this.expression(0);
            this.state = 621;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
            if(la_===1) {
                this.state = 619;
                this.match(AdvplParser.T__10);
                this.state = 620;
                this.expression(0);

            }
            this.state = 624;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
            if(la_===1) {
                this.state = 623;
                this.methodAccessLoop();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_chIdentifier;
    return this;
}

ChIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChIdentifierContext.prototype.constructor = ChIdentifierContext;

ChIdentifierContext.prototype.TO = function() {
    return this.getToken(AdvplParser.TO, 0);
};

ChIdentifierContext.prototype.SELF = function() {
    return this.getToken(AdvplParser.SELF, 0);
};

ChIdentifierContext.prototype.END = function() {
    return this.getToken(AdvplParser.END, 0);
};

ChIdentifierContext.prototype.DEFAULT = function() {
    return this.getToken(AdvplParser.DEFAULT, 0);
};

ChIdentifierContext.prototype.CLASS = function() {
    return this.getToken(AdvplParser.CLASS, 0);
};

ChIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(AdvplParser.IDENTIFIER, 0);
};

ChIdentifierContext.prototype.DATA = function() {
    return this.getToken(AdvplParser.DATA, 0);
};

ChIdentifierContext.prototype.FROM = function() {
    return this.getToken(AdvplParser.FROM, 0);
};

ChIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterChIdentifier(this);
	}
};

ChIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitChIdentifier(this);
	}
};




AdvplParser.ChIdentifierContext = ChIdentifierContext;

AdvplParser.prototype.chIdentifier = function() {

    var localctx = new ChIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, AdvplParser.RULE_chIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        _la = this._input.LA(1);
        if(!(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (AdvplParser.TO - 38)) | (1 << (AdvplParser.END - 38)) | (1 << (AdvplParser.SELF - 38)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (AdvplParser.DEFAULT - 72)) | (1 << (AdvplParser.CLASS - 72)) | (1 << (AdvplParser.DATA - 72)) | (1 << (AdvplParser.FROM - 72)) | (1 << (AdvplParser.IDENTIFIER - 72)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.WSMETHOD = function() {
    return this.getToken(AdvplParser.WSMETHOD, 0);
};

IdentifierContext.prototype.OF = function() {
    return this.getToken(AdvplParser.OF, 0);
};

IdentifierContext.prototype.ASSUME = function() {
    return this.getToken(AdvplParser.ASSUME, 0);
};

IdentifierContext.prototype.DESCRIPTION = function() {
    return this.getToken(AdvplParser.DESCRIPTION, 0);
};

IdentifierContext.prototype.AS = function() {
    return this.getToken(AdvplParser.AS, 0);
};

IdentifierContext.prototype.TO = function() {
    return this.getToken(AdvplParser.TO, 0);
};

IdentifierContext.prototype.NEXT = function() {
    return this.getToken(AdvplParser.NEXT, 0);
};

IdentifierContext.prototype.END = function() {
    return this.getToken(AdvplParser.END, 0);
};

IdentifierContext.prototype.DATA = function() {
    return this.getToken(AdvplParser.DATA, 0);
};

IdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(AdvplParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitIdentifier(this);
	}
};




AdvplParser.IdentifierContext = IdentifierContext;

AdvplParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, AdvplParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        _la = this._input.LA(1);
        if(!(_la===AdvplParser.T__9 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (AdvplParser.TO - 38)) | (1 << (AdvplParser.NEXT - 38)) | (1 << (AdvplParser.END - 38)) | (1 << (AdvplParser.SELF - 38)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (AdvplParser.ASSUME - 74)) | (1 << (AdvplParser.DATA - 74)) | (1 << (AdvplParser.WSMETHOD - 74)) | (1 << (AdvplParser.DESCRIPTION - 74)) | (1 << (AdvplParser.AS - 74)) | (1 << (AdvplParser.OF - 74)) | (1 << (AdvplParser.IDENTIFIER - 74)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayAccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_arrayAccess;
    return this;
}

ArrayAccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayAccessContext.prototype.constructor = ArrayAccessContext;

ArrayAccessContext.prototype.expressionList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionListContext);
    } else {
        return this.getTypedRuleContext(ExpressionListContext,i);
    }
};

ArrayAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterArrayAccess(this);
	}
};

ArrayAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitArrayAccess(this);
	}
};




AdvplParser.ArrayAccessContext = ArrayAccessContext;

AdvplParser.prototype.arrayAccess = function() {

    var localctx = new ArrayAccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, AdvplParser.RULE_arrayAccess);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 636; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 632;
        		this.match(AdvplParser.LBRACK);
        		this.state = 633;
        		this.expressionList();
        		this.state = 634;
        		this.match(AdvplParser.RBRACK);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 638; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,68, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodAccessLoopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_methodAccessLoop;
    return this;
}

MethodAccessLoopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodAccessLoopContext.prototype.constructor = MethodAccessLoopContext;

MethodAccessLoopContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

MethodAccessLoopContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

MethodAccessLoopContext.prototype.arrayAccess = function() {
    return this.getTypedRuleContext(ArrayAccessContext,0);
};

MethodAccessLoopContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterMethodAccessLoop(this);
	}
};

MethodAccessLoopContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitMethodAccessLoop(this);
	}
};




AdvplParser.MethodAccessLoopContext = MethodAccessLoopContext;

AdvplParser.prototype.methodAccessLoop = function() {

    var localctx = new MethodAccessLoopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, AdvplParser.RULE_methodAccessLoop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        this.match(AdvplParser.T__9);
        this.state = 641;
        this.identifier();
        this.state = 643;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 642;
            this.arguments();

        }
        this.state = 646;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 645;
            this.arrayAccess();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.LPAREN = function() {
    return this.getToken(AdvplParser.LPAREN, 0);
};

ArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentsContext.prototype.RPAREN = function() {
    return this.getToken(AdvplParser.RPAREN, 0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitArguments(this);
	}
};




AdvplParser.ArgumentsContext = ArgumentsContext;

AdvplParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, AdvplParser.RULE_arguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this.match(AdvplParser.LPAREN);
        this.state = 649;
        this.expressionList();
        this.state = 650;
        this.match(AdvplParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.optionalExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionalExpressionContext);
    } else {
        return this.getTypedRuleContext(OptionalExpressionContext,i);
    }
};

ExpressionListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.COMMA);
    } else {
        return this.getToken(AdvplParser.COMMA, i);
    }
};


ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExpressionList(this);
	}
};




AdvplParser.ExpressionListContext = ExpressionListContext;

AdvplParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, AdvplParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this.optionalExpression();
        this.state = 657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.COMMA) {
            this.state = 653;
            this.match(AdvplParser.COMMA);
            this.state = 654;
            this.optionalExpression();
            this.state = 659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_optionalExpression;
    return this;
}

OptionalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalExpressionContext.prototype.constructor = OptionalExpressionContext;

OptionalExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OptionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterOptionalExpression(this);
	}
};

OptionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitOptionalExpression(this);
	}
};




AdvplParser.OptionalExpressionContext = OptionalExpressionContext;

AdvplParser.prototype.optionalExpression = function() {

    var localctx = new OptionalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, AdvplParser.RULE_optionalExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 660;
            this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListComaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_expressionListComa;
    return this;
}

ExpressionListComaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListComaContext.prototype.constructor = ExpressionListComaContext;

ExpressionListComaContext.prototype.COMMA = function() {
    return this.getToken(AdvplParser.COMMA, 0);
};

ExpressionListComaContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExpressionListComa(this);
	}
};

ExpressionListComaContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExpressionListComa(this);
	}
};




AdvplParser.ExpressionListComaContext = ExpressionListComaContext;

AdvplParser.prototype.expressionListComa = function() {

    var localctx = new ExpressionListComaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, AdvplParser.RULE_expressionListComa);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 663;
        this.match(AdvplParser.COMMA);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;


 
LiteralContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LiteralStringDuplaContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralStringDuplaContext.prototype = Object.create(LiteralContext.prototype);
LiteralStringDuplaContext.prototype.constructor = LiteralStringDuplaContext;

AdvplParser.LiteralStringDuplaContext = LiteralStringDuplaContext;

LiteralStringDuplaContext.prototype.STRING = function() {
    return this.getToken(AdvplParser.STRING, 0);
};
LiteralStringDuplaContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterLiteralStringDupla(this);
	}
};

LiteralStringDuplaContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitLiteralStringDupla(this);
	}
};


function LiteralLogicalContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralLogicalContext.prototype = Object.create(LiteralContext.prototype);
LiteralLogicalContext.prototype.constructor = LiteralLogicalContext;

AdvplParser.LiteralLogicalContext = LiteralLogicalContext;

LiteralLogicalContext.prototype.TRUE = function() {
    return this.getToken(AdvplParser.TRUE, 0);
};

LiteralLogicalContext.prototype.FALSE = function() {
    return this.getToken(AdvplParser.FALSE, 0);
};
LiteralLogicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterLiteralLogical(this);
	}
};

LiteralLogicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitLiteralLogical(this);
	}
};


function LiteralNilContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralNilContext.prototype = Object.create(LiteralContext.prototype);
LiteralNilContext.prototype.constructor = LiteralNilContext;

AdvplParser.LiteralNilContext = LiteralNilContext;

LiteralNilContext.prototype.NIL = function() {
    return this.getToken(AdvplParser.NIL, 0);
};
LiteralNilContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterLiteralNil(this);
	}
};

LiteralNilContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitLiteralNil(this);
	}
};


function LiteralNumberContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralNumberContext.prototype = Object.create(LiteralContext.prototype);
LiteralNumberContext.prototype.constructor = LiteralNumberContext;

AdvplParser.LiteralNumberContext = LiteralNumberContext;

LiteralNumberContext.prototype.NUMBER = function() {
    return this.getToken(AdvplParser.NUMBER, 0);
};
LiteralNumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterLiteralNumber(this);
	}
};

LiteralNumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitLiteralNumber(this);
	}
};


function LiteralStringSimplesContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralStringSimplesContext.prototype = Object.create(LiteralContext.prototype);
LiteralStringSimplesContext.prototype.constructor = LiteralStringSimplesContext;

AdvplParser.LiteralStringSimplesContext = LiteralStringSimplesContext;

LiteralStringSimplesContext.prototype.STRINGSIMPLE = function() {
    return this.getToken(AdvplParser.STRINGSIMPLE, 0);
};
LiteralStringSimplesContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterLiteralStringSimples(this);
	}
};

LiteralStringSimplesContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitLiteralStringSimples(this);
	}
};



AdvplParser.LiteralContext = LiteralContext;

AdvplParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, AdvplParser.RULE_literal);
    try {
        this.state = 671;
        switch(this._input.LA(1)) {
        case AdvplParser.NUMBER:
            localctx = new LiteralNumberContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 665;
            this.match(AdvplParser.NUMBER);
            break;
        case AdvplParser.STRING:
            localctx = new LiteralStringDuplaContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 666;
            this.match(AdvplParser.STRING);
            break;
        case AdvplParser.STRINGSIMPLE:
            localctx = new LiteralStringSimplesContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 667;
            this.match(AdvplParser.STRINGSIMPLE);
            break;
        case AdvplParser.TRUE:
            localctx = new LiteralLogicalContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 668;
            this.match(AdvplParser.TRUE);
            break;
        case AdvplParser.FALSE:
            localctx = new LiteralLogicalContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 669;
            this.match(AdvplParser.FALSE);
            break;
        case AdvplParser.NIL:
            localctx = new LiteralNilContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 670;
            this.match(AdvplParser.NIL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfFunctioncallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_ifFunctioncall;
    return this;
}

IfFunctioncallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfFunctioncallContext.prototype.constructor = IfFunctioncallContext;

IfFunctioncallContext.prototype.IF = function() {
    return this.getToken(AdvplParser.IF, 0);
};

IfFunctioncallContext.prototype.LPAREN = function() {
    return this.getToken(AdvplParser.LPAREN, 0);
};

IfFunctioncallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

IfFunctioncallContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.COMMA);
    } else {
        return this.getToken(AdvplParser.COMMA, i);
    }
};


IfFunctioncallContext.prototype.RPAREN = function() {
    return this.getToken(AdvplParser.RPAREN, 0);
};

IfFunctioncallContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterIfFunctioncall(this);
	}
};

IfFunctioncallContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitIfFunctioncall(this);
	}
};




AdvplParser.IfFunctioncallContext = IfFunctioncallContext;

AdvplParser.prototype.ifFunctioncall = function() {

    var localctx = new IfFunctioncallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, AdvplParser.RULE_ifFunctioncall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673;
        this.match(AdvplParser.IF);
        this.state = 674;
        this.match(AdvplParser.LPAREN);
        this.state = 675;
        this.expression(0);
        this.state = 676;
        this.match(AdvplParser.COMMA);
        this.state = 678;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AdvplParser.T__1) | (1 << AdvplParser.T__4) | (1 << AdvplParser.T__9) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (AdvplParser.ARROBA - 33)) | (1 << (AdvplParser.ECOMERCIAL - 33)) | (1 << (AdvplParser.TO - 33)) | (1 << (AdvplParser.TRUE - 33)) | (1 << (AdvplParser.FALSE - 33)) | (1 << (AdvplParser.NIL - 33)) | (1 << (AdvplParser.NEXT - 33)) | (1 << (AdvplParser.IF - 33)) | (1 << (AdvplParser.END - 33)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (AdvplParser.SELF - 69)) | (1 << (AdvplParser.ASSUME - 69)) | (1 << (AdvplParser.DATA - 69)) | (1 << (AdvplParser.WSMETHOD - 69)) | (1 << (AdvplParser.DESCRIPTION - 69)) | (1 << (AdvplParser.AS - 69)) | (1 << (AdvplParser.OF - 69)) | (1 << (AdvplParser.LPAREN - 69)) | (1 << (AdvplParser.NUMBER - 69)) | (1 << (AdvplParser.IDENTIFIER - 69)))) !== 0) || _la===AdvplParser.STRING || _la===AdvplParser.STRINGSIMPLE) {
            this.state = 677;
            this.expression(0);
        }

        this.state = 680;
        this.match(AdvplParser.COMMA);
        this.state = 682;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AdvplParser.T__1) | (1 << AdvplParser.T__4) | (1 << AdvplParser.T__9) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (AdvplParser.ARROBA - 33)) | (1 << (AdvplParser.ECOMERCIAL - 33)) | (1 << (AdvplParser.TO - 33)) | (1 << (AdvplParser.TRUE - 33)) | (1 << (AdvplParser.FALSE - 33)) | (1 << (AdvplParser.NIL - 33)) | (1 << (AdvplParser.NEXT - 33)) | (1 << (AdvplParser.IF - 33)) | (1 << (AdvplParser.END - 33)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (AdvplParser.SELF - 69)) | (1 << (AdvplParser.ASSUME - 69)) | (1 << (AdvplParser.DATA - 69)) | (1 << (AdvplParser.WSMETHOD - 69)) | (1 << (AdvplParser.DESCRIPTION - 69)) | (1 << (AdvplParser.AS - 69)) | (1 << (AdvplParser.OF - 69)) | (1 << (AdvplParser.LPAREN - 69)) | (1 << (AdvplParser.NUMBER - 69)) | (1 << (AdvplParser.IDENTIFIER - 69)))) !== 0) || _la===AdvplParser.STRING || _la===AdvplParser.STRINGSIMPLE) {
            this.state = 681;
            this.expression(0);
        }

        this.state = 684;
        this.match(AdvplParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.IF);
    } else {
        return this.getToken(AdvplParser.IF, i);
    }
};


IfStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

IfStatementContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

IfStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

IfStatementContext.prototype.ENDIF = function() {
    return this.getToken(AdvplParser.ENDIF, 0);
};

IfStatementContext.prototype.END = function() {
    return this.getToken(AdvplParser.END, 0);
};

IfStatementContext.prototype.ELSEIF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.ELSEIF);
    } else {
        return this.getToken(AdvplParser.ELSEIF, i);
    }
};


IfStatementContext.prototype.ELSE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.ELSE);
    } else {
        return this.getToken(AdvplParser.ELSE, i);
    }
};


IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitIfStatement(this);
	}
};




AdvplParser.IfStatementContext = IfStatementContext;

AdvplParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, AdvplParser.RULE_ifStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 686;
        this.match(AdvplParser.IF);
        this.state = 687;
        this.expression(0);
        this.state = 688;
        this.crlf();
        this.state = 689;
        this.block();
        this.state = 697;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.ELSEIF) {
            this.state = 690;
            this.match(AdvplParser.ELSEIF);
            this.state = 691;
            this.expression(0);
            this.state = 692;
            this.crlf();
            this.state = 693;
            this.block();
            this.state = 699;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 706;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AdvplParser.ELSE) {
            this.state = 700;
            this.match(AdvplParser.ELSE);
            this.state = 701;
            this.crlf();
            this.state = 702;
            this.block();
            this.state = 708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 713;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.state = 709;
            this.match(AdvplParser.ENDIF);
            break;

        case 2:
            this.state = 710;
            this.match(AdvplParser.END);
            break;

        case 3:
            this.state = 711;
            this.match(AdvplParser.END);
            this.state = 712;
            this.match(AdvplParser.IF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.FOR = function() {
    return this.getToken(AdvplParser.FOR, 0);
};

ForStatementContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

ForStatementContext.prototype.TO = function() {
    return this.getToken(AdvplParser.TO, 0);
};

ForStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ForStatementContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

ForStatementContext.prototype.NEXT = function() {
    return this.getToken(AdvplParser.NEXT, 0);
};

ForStatementContext.prototype.STEP = function() {
    return this.getToken(AdvplParser.STEP, 0);
};

ForStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitForStatement(this);
	}
};




AdvplParser.ForStatementContext = ForStatementContext;

AdvplParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, AdvplParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        this.match(AdvplParser.FOR);
        this.state = 716;
        this.forInit();
        this.state = 717;
        this.match(AdvplParser.TO);
        this.state = 718;
        this.expression(0);
        this.state = 721;
        _la = this._input.LA(1);
        if(_la===AdvplParser.STEP) {
            this.state = 719;
            this.match(AdvplParser.STEP);
            this.state = 720;
            this.expression(0);
        }

        this.state = 723;
        this.crlf();
        this.state = 725;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        if(la_===1) {
            this.state = 724;
            this.block();

        }

        this.state = 727;
        this.match(AdvplParser.NEXT);
        this.state = 729;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AdvplParser.T__1) | (1 << AdvplParser.T__4) | (1 << AdvplParser.T__9) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (AdvplParser.ARROBA - 33)) | (1 << (AdvplParser.ECOMERCIAL - 33)) | (1 << (AdvplParser.TO - 33)) | (1 << (AdvplParser.TRUE - 33)) | (1 << (AdvplParser.FALSE - 33)) | (1 << (AdvplParser.NIL - 33)) | (1 << (AdvplParser.NEXT - 33)) | (1 << (AdvplParser.IF - 33)) | (1 << (AdvplParser.END - 33)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (AdvplParser.SELF - 69)) | (1 << (AdvplParser.ASSUME - 69)) | (1 << (AdvplParser.DATA - 69)) | (1 << (AdvplParser.WSMETHOD - 69)) | (1 << (AdvplParser.DESCRIPTION - 69)) | (1 << (AdvplParser.AS - 69)) | (1 << (AdvplParser.OF - 69)) | (1 << (AdvplParser.LPAREN - 69)) | (1 << (AdvplParser.NUMBER - 69)) | (1 << (AdvplParser.IDENTIFIER - 69)))) !== 0) || _la===AdvplParser.STRING || _la===AdvplParser.STRINGSIMPLE) {
            this.state = 728;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_doStatement;
    return this;
}

DoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

DoStatementContext.prototype.DO = function() {
    return this.getToken(AdvplParser.DO, 0);
};

DoStatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

DoStatementContext.prototype.docaseStatement = function() {
    return this.getTypedRuleContext(DocaseStatementContext,0);
};

DoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterDoStatement(this);
	}
};

DoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitDoStatement(this);
	}
};




AdvplParser.DoStatementContext = DoStatementContext;

AdvplParser.prototype.doStatement = function() {

    var localctx = new DoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, AdvplParser.RULE_doStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 731;
        this.match(AdvplParser.DO);
        this.state = 734;
        switch(this._input.LA(1)) {
        case AdvplParser.WHILE:
            this.state = 732;
            this.whileStatement();
            break;
        case AdvplParser.CASE:
            this.state = 733;
            this.docaseStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExitOrLoopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_exitOrLoopStatement;
    return this;
}

ExitOrLoopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExitOrLoopStatementContext.prototype.constructor = ExitOrLoopStatementContext;

ExitOrLoopStatementContext.prototype.EXIT = function() {
    return this.getToken(AdvplParser.EXIT, 0);
};

ExitOrLoopStatementContext.prototype.LOOP = function() {
    return this.getToken(AdvplParser.LOOP, 0);
};

ExitOrLoopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterExitOrLoopStatement(this);
	}
};

ExitOrLoopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitExitOrLoopStatement(this);
	}
};




AdvplParser.ExitOrLoopStatementContext = ExitOrLoopStatementContext;

AdvplParser.prototype.exitOrLoopStatement = function() {

    var localctx = new ExitOrLoopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, AdvplParser.RULE_exitOrLoopStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 736;
        _la = this._input.LA(1);
        if(!(_la===AdvplParser.EXIT || _la===AdvplParser.LOOP)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function() {
    return this.getToken(AdvplParser.WHILE, 0);
};

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

WhileStatementContext.prototype.ENDDO = function() {
    return this.getToken(AdvplParser.ENDDO, 0);
};

WhileStatementContext.prototype.END = function() {
    return this.getToken(AdvplParser.END, 0);
};

WhileStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitWhileStatement(this);
	}
};




AdvplParser.WhileStatementContext = WhileStatementContext;

AdvplParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, AdvplParser.RULE_whileStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 738;
        this.match(AdvplParser.WHILE);
        this.state = 739;
        this.expression(0);
        this.state = 740;
        this.crlf();
        this.state = 742;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        if(la_===1) {
            this.state = 741;
            this.block();

        }
        this.state = 744;
        _la = this._input.LA(1);
        if(!(_la===AdvplParser.T__11 || _la===AdvplParser.ENDDO || _la===AdvplParser.END)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 746;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 745;
            this.crlf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DocaseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_docaseStatement;
    return this;
}

DocaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DocaseStatementContext.prototype.constructor = DocaseStatementContext;

DocaseStatementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.CASE);
    } else {
        return this.getToken(AdvplParser.CASE, i);
    }
};


DocaseStatementContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

DocaseStatementContext.prototype.ENDCASE = function() {
    return this.getToken(AdvplParser.ENDCASE, 0);
};

DocaseStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

DocaseStatementContext.prototype.OTHERWISE = function() {
    return this.getToken(AdvplParser.OTHERWISE, 0);
};

DocaseStatementContext.prototype.END = function() {
    return this.getToken(AdvplParser.END, 0);
};

DocaseStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

DocaseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterDocaseStatement(this);
	}
};

DocaseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitDocaseStatement(this);
	}
};




AdvplParser.DocaseStatementContext = DocaseStatementContext;

AdvplParser.prototype.docaseStatement = function() {

    var localctx = new DocaseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, AdvplParser.RULE_docaseStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 748;
        this.match(AdvplParser.CASE);
        this.state = 749;
        this.crlf();
        this.state = 756; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 750;
            this.match(AdvplParser.CASE);
            this.state = 751;
            this.expression(0);
            this.state = 752;
            this.crlf();
            this.state = 754;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
            if(la_===1) {
                this.state = 753;
                this.block();

            }
            this.state = 758; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AdvplParser.CASE);
        this.state = 764;
        _la = this._input.LA(1);
        if(_la===AdvplParser.OTHERWISE) {
            this.state = 760;
            this.match(AdvplParser.OTHERWISE);
            this.state = 762;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
            if(la_===1) {
                this.state = 761;
                this.block();

            }
        }

        this.state = 772;
        switch(this._input.LA(1)) {
        case AdvplParser.T__12:
            this.state = 766;
            this.match(AdvplParser.T__12);
            break;
        case AdvplParser.ENDCASE:
            this.state = 767;
            this.match(AdvplParser.ENDCASE);
            break;
        case AdvplParser.END:
            this.state = 768;
            this.match(AdvplParser.END);
            this.state = 770;
            _la = this._input.LA(1);
            if(_la===AdvplParser.CASE) {
                this.state = 769;
                this.match(AdvplParser.CASE);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 775;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        if(la_===1) {
            this.state = 774;
            this.crlf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_chStatement;
    return this;
}

ChStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChStatementContext.prototype.constructor = ChStatementContext;

ChStatementContext.prototype.chIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChIdentifierContext);
    } else {
        return this.getTypedRuleContext(ChIdentifierContext,i);
    }
};

ChStatementContext.prototype.arrobaDefine = function() {
    return this.getTypedRuleContext(ArrobaDefineContext,0);
};

ChStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ChStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.COMMA);
    } else {
        return this.getToken(AdvplParser.COMMA, i);
    }
};


ChStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterChStatement(this);
	}
};

ChStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitChStatement(this);
	}
};




AdvplParser.ChStatementContext = ChStatementContext;

AdvplParser.prototype.chStatement = function() {

    var localctx = new ChStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, AdvplParser.RULE_chStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        switch(this._input.LA(1)) {
        case AdvplParser.TO:
        case AdvplParser.END:
        case AdvplParser.SELF:
        case AdvplParser.DEFAULT:
        case AdvplParser.CLASS:
        case AdvplParser.DATA:
        case AdvplParser.FROM:
        case AdvplParser.IDENTIFIER:
            this.state = 777;
            this.chIdentifier();
            break;
        case AdvplParser.ARROBA:
            this.state = 778;
            this.arrobaDefine();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 790; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 790;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
            switch(la_) {
            case 1:
                this.state = 781;
                this.chIdentifier();
                break;

            case 2:
                this.state = 782;
                this.expression(0);
                this.state = 787;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===AdvplParser.COMMA) {
                    this.state = 783;
                    this.match(AdvplParser.COMMA);
                    this.state = 784;
                    this.expression(0);
                    this.state = 789;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            }
            this.state = 792; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AdvplParser.T__1) | (1 << AdvplParser.T__4) | (1 << AdvplParser.T__9) | (1 << AdvplParser.PLUSPLUS) | (1 << AdvplParser.MINUSMINUS) | (1 << AdvplParser.PLUS) | (1 << AdvplParser.MINUS))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (AdvplParser.ARROBA - 33)) | (1 << (AdvplParser.ECOMERCIAL - 33)) | (1 << (AdvplParser.TO - 33)) | (1 << (AdvplParser.TRUE - 33)) | (1 << (AdvplParser.FALSE - 33)) | (1 << (AdvplParser.NIL - 33)) | (1 << (AdvplParser.NEXT - 33)) | (1 << (AdvplParser.IF - 33)) | (1 << (AdvplParser.END - 33)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (AdvplParser.SELF - 69)) | (1 << (AdvplParser.DEFAULT - 69)) | (1 << (AdvplParser.ASSUME - 69)) | (1 << (AdvplParser.CLASS - 69)) | (1 << (AdvplParser.DATA - 69)) | (1 << (AdvplParser.FROM - 69)) | (1 << (AdvplParser.WSMETHOD - 69)) | (1 << (AdvplParser.DESCRIPTION - 69)) | (1 << (AdvplParser.AS - 69)) | (1 << (AdvplParser.OF - 69)) | (1 << (AdvplParser.LPAREN - 69)) | (1 << (AdvplParser.NUMBER - 69)) | (1 << (AdvplParser.IDENTIFIER - 69)))) !== 0) || _la===AdvplParser.STRING || _la===AdvplParser.STRINGSIMPLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrobaDefineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_arrobaDefine;
    return this;
}

ArrobaDefineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrobaDefineContext.prototype.constructor = ArrobaDefineContext;

ArrobaDefineContext.prototype.ARROBA = function() {
    return this.getToken(AdvplParser.ARROBA, 0);
};

ArrobaDefineContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArrobaDefineContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterArrobaDefine(this);
	}
};

ArrobaDefineContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitArrobaDefine(this);
	}
};




AdvplParser.ArrobaDefineContext = ArrobaDefineContext;

AdvplParser.prototype.arrobaDefine = function() {

    var localctx = new ArrobaDefineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, AdvplParser.RULE_arrobaDefine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.match(AdvplParser.ARROBA);
        this.state = 795;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ForInitContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForInitContext.prototype.ATTRIB_OPERATOR = function() {
    return this.getToken(AdvplParser.ATTRIB_OPERATOR, 0);
};

ForInitContext.prototype.EQUALS = function() {
    return this.getToken(AdvplParser.EQUALS, 0);
};

ForInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterForInit(this);
	}
};

ForInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitForInit(this);
	}
};




AdvplParser.ForInitContext = ForInitContext;

AdvplParser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, AdvplParser.RULE_forInit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 797;
        this.identifier();
        this.state = 798;
        _la = this._input.LA(1);
        if(!(_la===AdvplParser.EQUALS || _la===AdvplParser.ATTRIB_OPERATOR)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 799;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CrlfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AdvplParser.RULE_crlf;
    return this;
}

CrlfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CrlfContext.prototype.constructor = CrlfContext;

CrlfContext.prototype.CRLF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AdvplParser.CRLF);
    } else {
        return this.getToken(AdvplParser.CRLF, i);
    }
};


CrlfContext.prototype.enterRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.enterCrlf(this);
	}
};

CrlfContext.prototype.exitRule = function(listener) {
    if(listener instanceof AdvplListener ) {
        listener.exitCrlf(this);
	}
};




AdvplParser.CrlfContext = CrlfContext;

AdvplParser.prototype.crlf = function() {

    var localctx = new CrlfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, AdvplParser.RULE_crlf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 807;
        switch(this._input.LA(1)) {
        case AdvplParser.CRLF:
            this.state = 802; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 801;
            		this.match(AdvplParser.CRLF);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 804; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,96, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        case AdvplParser.T__13:
            this.state = 806;
            this.match(AdvplParser.T__13);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


AdvplParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 41:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

AdvplParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 7);
		case 1:
			return this.precpred(this._ctx, 6);
		case 2:
			return this.precpred(this._ctx, 5);
		case 3:
			return this.precpred(this._ctx, 4);
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 2);
		case 6:
			return this.precpred(this._ctx, 1);
		case 7:
			return this.precpred(this._ctx, 10);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.AdvplParser = AdvplParser;
